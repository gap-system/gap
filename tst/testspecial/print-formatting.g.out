gap> # test formatting status for stdout
gap> old := PrintFormattingStatus("*stdout*");
rec( indent := true, linewrap := true )
gap> SetPrintFormattingStatus("*stdout*", false);
gap> PrintFormattingStatus("*stdout*");
rec( indent := false, linewrap := false )
gap> Display(x -> x);
function ( x )
return x;
end
gap> SetPrintFormattingStatus("*stdout*", true);
gap> PrintFormattingStatus("*stdout*");
rec( indent := true, linewrap := true )
gap> Display(x -> x);
function ( x )
    return x;
end
gap> SetPrintFormattingStatus("*stdout*", old);;
gap> PrintFormattingStatus("*stdout*");
rec( indent := true, linewrap := true )
gap> 
gap> # test formatting status for errout
gap> 1/0; # trigger a break loop
Error, Rational operations: <divisor> must not be zero
not in any function at *stdin*:14
type 'quit;' to quit to outer loop
brk> old := PrintFormattingStatus("*errout*");
rec( indent := true, linewrap := true )
brk> SetPrintFormattingStatus("*errout*", false);
brk> PrintFormattingStatus("*errout*");
rec( indent := false, linewrap := false )
brk> Display(x -> x);
function ( x )
return x;
end
brk> SetPrintFormattingStatus("*errout*", true);
brk> PrintFormattingStatus("*errout*");
rec( indent := true, linewrap := true )
brk> Display(x -> x);
function ( x )
    return x;
end
brk> SetPrintFormattingStatus("*errout*", old);;
brk> PrintFormattingStatus("*errout*");
rec( indent := true, linewrap := true )
brk> QUIT;
