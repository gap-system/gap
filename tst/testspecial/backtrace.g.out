gap> f := function() 
>   local l;
>   l := 0 * [1..6];
>   l[[1..3]] := 1;
> end;
function(  ) ... end
gap> f();
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `[]:=' on 3 arguments at GAPROOT/lib/methsel2.g:250 called from
l[[ 1 .. 3 ]] := 1; at *stdin*:5 called from
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:7
type 'quit;' to quit to outer loop
brk> Where();
l[[ 1 .. 3 ]] := 1; at *stdin*:5 called from
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() if true = 1/0 then return 1; fi; return 2; end;;
gap> f();
Error, Rational operations: <divisor> must not be zero in
  1 / 0 at *stdin*:9 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:10
you can replace <divisor> via 'return <divisor>;'
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() local x; if x then return 1; fi; return 2; end;;
gap> f();
Error, Variable: 'x' must have an assigned value in
  if x then
    return 1;
fi; at *stdin*:12 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:13
type 'quit;' to quit to outer loop
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() if 1 then return 1; fi; return 2; end;;
gap> f();
Error, <expr> must be 'true' or 'false' (not a integer) in
  if 1 then
    return 1;
fi; at *stdin*:15 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:16
you can replace <expr> via 'return <expr>;'
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() if 1 < 0 then return 1; elif 1 then return 2; fi; return 3; end;;
gap> f();
Error, <expr> must be 'true' or 'false' (not a integer) in
  if 1 < 0 then
    return 1;
elif 1 then
    return 2;
fi; at *stdin*:18 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:19
you can replace <expr> via 'return <expr>;'
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() while 1 do return 1; od; return 2; end;;
gap> f();
Error, <expr> must be 'true' or 'false' (not a integer) in
  while 1 do
    return 1;
od; at *stdin*:21 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:22
you can replace <expr> via 'return <expr>;'
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() local i; for i in 1 do return 1; od; return 2; end;;
gap> f();
Error, You cannot loop over the integer 1 did you mean the range [1..1] at GAPROOT/lib/integer.gi:1742 called from
for i in 1 do
    return 1;
od; at *stdin*:24 called from
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:25
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> Where();
for i in 1 do
    return 1;
od; at *stdin*:24 called from
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() local i; for i in true do return 1; od; return 2; end;;
gap> f();
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `Iterator' on 1 arguments at GAPROOT/lib/methsel2.g:250 called from
for i in true do
    return 1;
od; at *stdin*:27 called from
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:28
type 'quit;' to quit to outer loop
brk> Where();
for i in true do
    return 1;
od; at *stdin*:27 called from
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() local x; repeat x:=1; until 1; return 2; end;;
gap> f();
Error, <expr> must be 'true' or 'false' (not a integer) in
  repeat
    x := 1;
until 1; at *stdin*:30 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:31
you can replace <expr> via 'return <expr>;'
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() local x; Assert(0, 1); return 2; end;;
gap> f();
Error, Assertion condition must evaluate to 'true' or 'false', not a integer in
  Assert( 0, 1 ); at *stdin*:33 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:34
you may 'return true;' or 'return false;'
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> 
gap> f:=function() local x; Assert(0, 1, "hello"); return 2; end;;
gap> f();
Error, Assertion condition must evaluate to 'true' or 'false', not a integer in
  Assert( 0, 1, "hello" ); at *stdin*:36 called from 
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:37
you may 'return true;' or 'return false;'
brk> Where();
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> # Verify issue #2656 is fixed
gap> l := [[1]];; f := {} -> l[2,1];;
gap> f();
Error, List Element: <list>[2] must have an assigned value in
  return m[i][j]; at GAPROOT/lib/matrix.gi:29 called from 
return l[2, 1]; at *stdin*:39 called from
<function "f">( <arguments> )
 called from read-eval loop at *stdin*:40
you can 'return;' after assigning a value
brk> Where();
return l[2, 1]; at *stdin*:39 called from
<function "f">( <arguments> )
 called from read-eval loop at *errin*:1
brk> quit;
gap> 
gap> # verify issue #1373 is fixed
gap> InstallMethod( Matrix, [IsFilter, IsSemiring, IsMatrixObj], {a,b,c} -> fail );
Error, <oper> must be an operation in
  <<compiled GAP code>> from GAPROOT/lib/oper1.g:377 in function INSTALL_METHOD called from 
<<compiled GAP code>> from GAPROOT/lib/oper1.g:337 in function InstallMethod called from
<function "InstallMethod">( <arguments> )
 called from read-eval loop at *stdin*:42
gap> QUIT;
