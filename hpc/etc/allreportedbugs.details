######### ######### ######### ######### ######### ######### ######### #########
## This file holds original bug messages with full details. The test file is 
## "allreportedbugs.tst".
##
## John McDermott Nov 99 ....
######### ######### ######### ######### ######### ######### ######### #########



##########
1111111111
##########

Date: Fri, 22 Oct 1999 10:51:03 +0100
Subject: Primitive Groups Library again
From: Steve Linton <sal@dcs.st-and.ac.uk>

There seems to be another bug in the primitive groups library.

In 4.1 fix 5, with the workaround for the kernel bug I get

gap> PrimitiveGroup(81,114); 
3^4:GL(2,9):2 < GL(4,3)_4
gap> Orbits(last,[1..81]);
[ [ 1, 28, 55, 37, 73, 64, 19, 46, 10 ], [ 2, 29, 56, 38, 74, 65, 20, 47, 11 ]
    , [ 3, 30, 57, 39, 75, 66, 21, 48, 12 ], 
  [ 4, 9, 31, 36, 58, 40, 81, 63, 45, 76, 67, 27, 72, 22, 49, 13, 54, 18 ], 
  [ 5, 7, 32, 34, 59, 41, 79, 61, 43, 77, 68, 25, 70, 23, 50, 14, 52, 16 ], 
  [ 6, 8, 33, 35, 60, 42, 80, 62, 44, 78, 69, 26, 71, 24, 51, 15, 53, 17 ] ]

In the development version I first ran into a bug in
ImmutableMatrix (fix in a minute) and then the same result.



##########
2222222222
##########

Date: Sun, 24 Oct 1999 15:04:35 +0100
Subject: trivial PC group detected!
From: Steve Linton <sal@dcs.st-and.ac.uk>

I got the below in the development version. I don't have 4.1 to
hand to check.  It appears that a trivial PC group has been
created, which I understood to be  forbidden.

gap> ct := Irr(SymmetricGroup(5));;
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error no 1st choice method found for `CanonicalPcgsByGeneratorsWithImages' on \
3 arguments at
Error( no_method_found );
CanonicalPcgsByGeneratorsWithImages( Pcgs( G ), gens, imgs ) called from
GroupGeneralMappingByImages( k, f, gpcgs, fgens{[ 1 .. l ]} ) called from
CharacterMorphismGroup( D ) called from
DixonInit( G, opt ) called from
IrrDixonSchneider( G, rec(
    ) ) called from
...
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return to continue
brk> gens;
[  ]
brk> imgs;
[  ]
brk> f;
<free group on the generators [ f1 ]>
brk> k;
<pc group of size 1 with 0 generators>
brk> 



##########
3333333333
##########

Date: Thu, 28 Oct 1999 12:05:53 +0800 (WST))
Subject: Re: Polynomials
From: Willem de Graaf <wdg@dcs.st-and.ac.uk> (Really from Alice Niemeyer.)

I could not reproduce Alice's error with polynomials. Is there anybody
who can?
     Willem

> this is probably related to the problem with polynomials that
> I reported earlier, but I thought I report it again just in case;
> 	Alice.

gap> VERSION;;
"4.1 fix 5"
gap> x := Indeterminate( GF(5),"x" );
x
gap> f := x^4 - 3*x^3 + 2*x^2 +4*x - 1;
-Z(5)^0-x+Z(5)*x^2+Z(5)*x^3+x^4
gap> Factors(f);;
Error no method found for operation QuotientRemainder with 3 arguments
QuotientRemainder( R, r, m ) called from
EuclideanRemainder( R, r, m ) called from
PowerMod( R, g, (Characteristic( br ) ^ (DegreeOverPrimeField( br ) * d) - 1) 
  / 2, f ) called from
FactorsCommonDegreePol( R, gcd, deg ) called from
FactorsSquarefree( R, k, opt ) called from
...
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return to continue
brk> 
gap> x := Indeterminate( GF(5),1 );  
x
gap> f := x^4 - 3*x^3 + 2*x^2 +4*x - 1;
-Z(5)^0-x+Z(5)*x^2+Z(5)*x^3+x^4
gap> Factors(f);
[ Z(5)^0-x+x^2, -Z(5)^0+Z(5)^3*x+x^2 ]



##########
4444444444
##########

Date: Thu, 28 Oct 1999 17:42:25 +0200
Subject: some minor bugs
From: Burkhard =?iso-8859-1?Q?H=F6fling?=<Burkhard.Hoefling@minet.uni-jena.de> 

recemtly I discovered a number of minor bugs and some inconsistencies which
I think could easily be avoided. All problems occur both with GAP 4r1n5 and
the current development version.

I include a brief summary below. Please do not hesitate to ask if anything
is unclear.

-- sum of two GF(q)-vectors of length 0 causes crash for 2 < q < 256
  apparently there are no problems with scalar product

gap> v := [Z(3)];;
gap> ConvertToVectorRep (v);;
gap> v{[]}+v{[]};;


-- manual:
  InducedPcgsByPcSequenceAndGenerators - according to the manual, the second
  argument must be an induced pcgs, but it is enough to have a list of group
  elements formung an igs


-- Embedding for wreath products - ImagesRepresentative does not work

gap> w := WreathProduct (CyclicGroup (2), CyclicGroup (2));;
gap> Image(Embedding (w, 1));;
Error, no method found...


-- SpecialPcgs does not work for matrix groups. (If one first
computes a Pcgs of g, SpecialPcgs works...)

gap> g := SL(2,3);;
gap> IsSolvable (g);;
gap> SpecialPcgs (g);;
Error, no method found...


-- IsPcgsCentralSeries seems to be true for any special pcgs ...

gap> IsPcgsCentralSeries (SpecialPcgs (SymmetricGroup (4)));
true

-- ... but one gets a strange result for PcgsCentralSeries if the
  group is not nilpotent

gap> PcgsCentralSeries (SymmetricGroup (4));
[ [  ], (1,2,3) ]
gap> IsPcgs (last);
false


-- for pc groups, SpecialPcgs does not set PcgsElementaryAbelianSeries

gap> s4 := Image (IsomorphismPcGroup (SymmetricGroup (4)));;
gap> SpecialPcgs (s4);;
gap> KnownAttributesOfObject (s4);
[ "Size", "One", "GeneratorsOfMagmaWithInverses",
  "MultiplicativeNeutralElement", "SpecialPcgs", "FamilyPcgs", "HomePcgs",
  "Pcgs" ]


-- pcgs of Pc group obtained by IsomorphismPcGroup should have
IsPcgsElementaryAbelianSeries/IsSpecialPcgs if original pcgs has that
property

gap> g := SymmetricGroup (4);;
gap> SpecialPcgs (g);;
gap> alpha := IsomorphismPcGroup (g);;
gap> IsSpecialPcgs (Pcgs (g));
true
gap> KnownAttributesOfObject (Pcgs (Image (alpha)));
[ "LENGTH", "RelativeOrders", "GroupOfPcgs", "OneOfPcgs", "PcSeries",
  "IndicesNormalSteps" ]


-- induced Pcgs from PcgsElementaryAbelianSeries/SpecialPcgs
  does not have IsPcgsElementaryAbelianSeries
  this happens for Pc groups as well

gap> g := SymmetricGroup (4);;
gap> InducedPcgs (SpecialPcgs(g),DerivedSubgroup (g));
[ (2,4,3), (1,4)(2,3), (1,3)(2,4) ]
gap> KnownAttributesOfObject (last);
[ "LENGTH", "RelativeOrders", "OneOfPcgs", "IndicesNormalSteps",
  "NormalSeriesByPcgs", "ParentPcgs" ]


-- it might be nice (and more consistent with other functions) to have
something like
  IsomorphismPcGroupWithPcgs (<pcgs>) which behaves as (similar to/instead of
  `PcGroupWithPcgs')

-- there seem to be two kinds of 'Error no method found" errors.
  "Error no method found" (without a comma after `Error'), from oper1.g
  does not allow ShowMethods, ShowDetails, etc. It would be nice to have
these
  commands available whenever a "no method found" happens.

gap> VectorSpace (GF(2), []);



##########
5555555555
##########

Date: Fri, 05 Nov 1999 11:14:14 -0500
Subject: guava test questions
From: David Joyner <wdj@usna.edu>

I have tested a few commands using the coding theory package
guava both in Gap3 and in Gap 4 in a win98 pentium 300mhz machine.
The page
http://mirrors.ccs.neu.edu/GAP/NEU/Info4/deposit.html#psh
encouraged reports, so here is one.

 In either case, guava doesn't seem to recognize the Hamming codes as
being cyclic (more precisely equivalent to a cyclic code). I don't know
if this is a bug or a feature. Certainly it might confuse a student
learning coding theory using guava. For example

gap> HC:=HammingCode(3,GF(2));;
and
gap> IsCyclicCode(HC);;
returns false. (However,
gap> C3:=TernaryGolayCode();;
then
gap> IsCyclicCode(C3);;
returns true!)

 In guava for gap4, if you type
gap> C1:=BinaryGolayCode();;
then
gap> AG1:=AutomorphismGroup(C1);;
you get
PrintTo: cannot open '/tmp/t3e8.0.0001' for output at
CallFuncList( PRINT_TO, arg );

If you then type
gap> H1:=CheckMat(C1);
then you get
[ [ Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), 0*Z(2), Z(2)^0,
0*Z(2),
      0*Z(2), Z(2)^0, 0*Z(2), Z(2)^0, 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2),
0*Z(2),
      0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ],
  <an immutable GF2 vector of length 23>, <an immutable GF2 vector of
length
    23>, <an immutable GF2 vector of length 23>,
  <an immutable GF2 vector of length 23>, <an immutable GF2 vector of
length
    23>, <an immutable GF2 vector of length 23>,
  <an immutable GF2 vector of length 23>, <an immutable GF2 vector of
length
    23>, <an immutable GF2 vector of length 23>,
  <an immutable GF2 vector of length 23> ]

This does not happen in gap3.
If you type
gap> codelist:=CyclicCodes(23,GF(2));
you get
[ Error, no method found! For debugging hints type ?Recovery from
NoMethodFound
Error no 1st choice method found for `CoefficientsRing' on 1 arguments
at
Error( no_method_found );
CoefficientsRing( DefaultRing( p ) ) called from
Codeword( GeneratorPol( C ) ) called from
MinimumWeightOfGenerators( C ) called from
UpperBoundMinimumDistance( C ) called from
CodeDescription( C ) called from
...
Entering break read-eval-print loop, you can 'quit;' to quit to outer
loop,
or you can return to continue
brk>

If you type
gap> Cp1:=PermutedCode(C1,sigma);;
gap> CodeIsomorphism(C1,Cp1);;
you get
PrintTo: cannot open '/tmp/t3e8.0.0002' for output at
CallFuncList( PRINT_TO, arg );
Similarly,
gap> IsEquivalent(C1,Cp1);
returns
PrintTo: cannot open '/tmp/t3e8.0.0003' for output at
CallFuncList( PRINT_TO, arg );



##########
6666666666
##########

Date: Mon, 8 Nov 1999 12:59:10 +0100 (MET)
From: "Peter F. Mueller"  <Peter.Mueller@IWR.Uni-Heidelberg.De>
Subject: Intransitive primitive groups ...

In Gap4R1, patchlevel 6, one obtains the following funny result:

gap> g:=PrimitiveGroup(25,20);
5^2:GL(2,5)_1
gap> Size(g);
25
gap> IsTransitive(g,[1..25]);
false
gap> quit;

Besides that, g is generated by a single element of order 5, and
nevertheless Size(g) returns 25.

There are many more ``intransitve primitive'' groups, see

gap> for n in [2..1000] do
> l:=AllPrimitiveGroups(DegreeOperation,n);
> l:=Filtered(l,z->IsTransitive(z)=false);
> if Length(l)>0 then
> Print(n," ",l,"\n\n");
> fi;
> od;
25 [ 5^2:GL(2,5)_1, 5^2:GL(2,5)_2, 5^2:GL(2,5)_3 ]

27 [ 3^3:GL(3,3)_1, 3^3:GL(3,3)_2 ]

49 [ 7^2:GL(2,7)_1, 7^2:GL(2,7)_2, 7^2:GL(2,7)_3, 7^2:GL(2,7)_4 ]

81 [ 3^4:GL(2,9):2 < GL(4,3)_1, 3^4:GL(2,9):2 < GL(4,3)_2, 3^4:GL(2,9):2 < GL(4,3)_3, 3^4:GL(2,9):2 < GL(4,3)_4, 
  3^4:GL(2,9):2 < GL(4,3)_5, 3^4:GL(2,9):2 < GL(4,3)_6, 3^4:GL(2,9):2 < GL(4,3)_7, 3^4:GL(2,9):2 < GL(4,3)_8, 
  3^4:GL(2,9):2 < GL(4,3)_9, 3^4:GL(2,9):2 < GL(4,3)_10 ]



##########
7777777777
##########

Date: Thu, 11 Nov 1999 19:43:50 +0100
Subject: Re: bug in FuncNUMBER_VEC8BIT?
From: Burkhard =?iso-8859-1?Q?H=F6fling?=<Burkhard.Hoefling@minet.uni-jena.de>

sorry for the late answer - this time I wanted to run a number of tests
before replying again.

>> Looking at the code in `vec8bit.c', I presume that the error is due tothe
>> fact that a garbage collection in `FuncNUMBER_VEC8BIT' might also move
>> `info', which therefore should be restored after each iteration?
>>
>This cannot be exactly it. `info' is an Obj, which is to say a pointer to
>a pointer to the data (this intermediate pointer is called a
>masterpointer). The masterpointers never move, and are adjusted when the
>data is moved by garbage collection.

Sorry, of course you are right - probably I was a bit over-enthusiastic
when I thought I had spotted the error so easily.

>Can you let me know more detals of when you get the problem -- system
>type, starting memory, etc.? A repeatable way of generating it would be
>invaluable.

The error I reported happens on Macintoshes, PowerPC and 68K emulation
mode, with GAP4R1 fix 6, started with 8m of memory. I couldn't reproduce
the problem on our DEC alpha machines.

The following code (derived from `vspcrow.tst'), when read into GAP after
startup,
produces the problem regularly (I usually get five to six errors per run),
but re-executing the code does not, usually, result in any errors any more.
The problem seems, in fact, related to garbage collection - if an error
occurs, there is always a collection just before it (uncomment the print
statements and turn garbage collection messages on to display partial
collections). What worries me most is that in some cases, it is really the
expression `p^(i-j)' which gives the wrong result, rather than
NumberFFVector (although this happens relatively rarely, probably because
the computation of p^(i-j) produces fewer collections). The values of a and
b usually differ significantly, usually the wrong one is larger by a factor
of 10^10 to 10^20.

Any suggestions as to where the problem might be?

The essential problem tracking down the bug is that I cannot reproduce the
*same* error (i.e, with the same numbers) twice, even if I start with
exactly the same settings on the same machine. Even loading the same
workspace does not help. Do you have any suggestions how I might create
repeatable results?

In any case, I'd like to know if you can reproduce the problem on any other
system.

Thanks in advance,

Burkhard.

gap> erg:= [];;  i:= 0;;
gap> move := true;
gap> if move then
> 	fill := List ([1..Length(smallprimes)*Length (dims)],
> 	x -> (1,100));;
> fi;
gap> dims:= [ 1,4,27,28,29,31,32,33,63,64,65,92,127,128,129,384 ];;
gap> smallprimes := Filtered (Primes, q -> q < 256);
gap> p := fail;;
gap> for p in smallprimes do
>	Print ("prime ", p, "\n");
>	for i in dims do
>
>        v:= BasisVectors( CanonicalBasis( GF(p)^i ) );
>	if move then
>        	x := NumberFFVector( v[1], p );
>        	Unbind (fill[Length(fill)]);
>	fi;
>	for j in [1..Length(v)] do
>#         	Print ("a\c");
>        	a := NumberFFVector( v[j], p );
>#         	Print ("b\c");
>       		b := p^(i-j);
>
>		if a <> b then
>	        	Print ( "error for ", i,"  ", j, "\n");
>    	    		Add( erg, [p, i, j, a, b, v[j]]);
>    	    		Error ();
>    	    	fi;
>    	  od;
>#    	  Print ("\n");
>      od;
>od;



##########
8888888888
##########

Date: Fri, 12 Nov 1999 01:31:19 +0100
Subject: Index(g,g) for g a subgroup of an fp group
From: Max Neunhoeffer <max.neunhoeffer@Math.RWTH-Aachen.De>

Yesterday I noticed the following with GAP4r1f6:

gap> f := FreeGroup("a","b");
<free group on the generators [ a, b ]>
gap> g := Group(f.1);
Group([ a ])
gap> CanComputeIndex(g,g);
true
gap> Index(g,g);
Error the coset enumeration has defined more than 256000 cosets:
type 'return;' if you want to continue with a new limit of 512000 cosets,
type 'quit;' if you want to quit the coset enumeration,
type 'maxlimit := 0; return;' in order to continue without a limit,
...

This is also a problem in the current development version.



##########
9999999999
##########

Date: Fri, 12 Nov 1999 20:57:48 +0100 (CET)
Subject: strange losses of storage
From: Hans-Ulrich.Besche@Math.RWTH-Aachen.De

I observed strange losses of storage in current GAP4, some times even
giving some kb back. The problem in serious to long time runing
computations with pc groups.

Best wishes, Hans Ulrich

for i in [ 1 .. 100 ] do
> LatticeSubgroups( SmallGroup( 24, 12 ) );
> Print( i, " \c" );
> GASMAN( "collect" ); od;
1 #G FULL 213412/ 15481kb live  98979/  2751kb dead   8782/ 30720kb free
2 #G FULL 213386/ 15475kb live  81970/  2213kb dead   8789/ 30720kb free
3 #G FULL 213402/ 15477kb live  81954/  2200kb dead   8786/ 30720kb free
4 #G FULL 213410/ 15481kb live  81778/  2192kb dead   8783/ 30720kb free
5 #G FULL 213434/ 15484kb live  81793/  2179kb dead   8778/ 30720kb free
...
38 #G FULL 213995/ 15597kb live  82066/  2217kb dead   8659/ 30720kb free
39 #G FULL 214014/ 15601kb live  82315/  2225kb dead   8655/ 30720kb free
40 #G FULL 214051/ 15610kb live  82065/  2237kb dead   8646/ 30720kb free
41 #G FULL 214068/ 15614kb live  82734/  2265kb dead   8642/ 30720kb free
42 #G FULL 214071/ 15612kb live  82402/  2294kb dead   8644/ 30720kb free
43 #G FULL 214053/ 15611kb live  82010/  2240kb dead   8645/ 30720kb free
44 #G FULL 214052/ 15610kb live  82457/  2235kb dead   8645/ 30720kb free
45 #G FULL 214057/ 15609kb live  81976/  2211kb dead   8647/ 30720kb free
46 #G FULL 214038/ 15607kb live  82009/  2204kb dead   8649/ 30720kb free
47 #G FULL 214042/ 15607kb live  81751/  2180kb dead   8649/ 30720kb free
48 #G FULL 214051/ 15609kb live  81693/  2187kb dead   8647/ 30720kb free
...
87 #G FULL 214320/ 15651kb live  82285/  2251kb dead   8602/ 30720kb free
88 #G FULL 214412/ 15665kb live  82520/  2308kb dead   8586/ 30720kb free
89 #G FULL 214418/ 15667kb live  82243/  2242kb dead   8585/ 30720kb free
90 #G FULL 214486/ 15682kb live  81972/  2215kb dead   8568/ 30720kb free
91 #G FULL 214456/ 15679kb live  82331/  2223kb dead   8572/ 30720kb free
92 #G FULL 214451/ 15676kb live  81929/  2196kb dead   8575/ 30720kb free
93 #G FULL 214483/ 15684kb live  81955/  2210kb dead   8566/ 30720kb free
94 #G FULL 214490/ 15687kb live  82051/  2218kb dead   8563/ 30720kb free
95 #G FULL 214479/ 15685kb live  81832/  2199kb dead   8565/ 30720kb free
96 #G FULL 214449/ 15680kb live  81872/  2194kb dead   8570/ 30720kb free
97 #G FULL 214450/ 15680kb live  81887/  2191kb dead   8571/ 30720kb free
98 #G FULL 214448/ 15679kb live  81898/  2187kb dead   8572/ 30720kb free
99 #G FULL 214475/ 15684kb live  82078/  2201kb dead   8567/ 30720kb free
100 #G FULL 214462/ 15681kb live  81969/  2194kb dead   8570/ 30720kb free



##########
 10 10 10
##########

Date: Thu, 18 Nov 1999 14:37:53 GMT
Subject: SparseActionHomomorphism
From: Willem de Graaf <wdg@cochran.dcs.st-and.ac.uk> ## Actually FG, via AH.

ahulpke
Mon Nov 15 21:39:49 GMT 1999
 
Update of /gap/CVS/GAP/4.0/lib
In directory cochran:/scratch/ali4r1/lib

Modified Files:
      Tag: GAP4R1
	oprt.gi 
Log Message:
Fixed SparseActionHomomorphism with domain given. (reported by Franz
G"ahler) for 4R1. AH

gap> G:=Group((1,2),(3,4));   
Group([ (1,2), (3,4) ])
gap> N:=Group((3,4));
Group([ (3,4) ])
gap> R:=RightCosets(G,N);
[ RightCoset(Group( [ (3,4) ] ),()), RightCoset(Group( [ (3,4) ] ),(1,2)) ]
gap> h:=SparseActionHomomorphism(G,R,[RightCoset(N,())],OnRight);
<action homomorphism>
gap> ImagesSource(h);
Error, no method found! For debugging hints type ?Recovery from NoMethodFou 



##########
 11 11 11
##########

Date: Fri, 19 Nov 1999 10:43:04 -0600 (CST)
Subject: Fix to semicong.gi Gap4r1 (fwd)
From: "Robert F. Morse" <rm43@evansville.edu>

---------- Forwarded message ----------
Date: Fri, 19 Nov 1999 06:16:35 -0600 (CST)

  Priority is low.

  Description. The internal routine SemigroupCongruenceIteratorData
  needs to check both the attributes GeneratorsOfMagma and 
  GeneratorOfMagmaWithInverses to determine if generators are available
  for computations. 

 Example: 
gap> f := FreeGroup(1);;
gap> c := SemigroupCongruenceByGeneratingPairs(f,[[f.1,f.1]]);;
gap> EquivalenceRelationPartition(c);;

 If the fix is not applied the last line will cause an error and break.



##########
 12 12 12 
##########

Date: Tue, 23 Nov 1999 16:09:48 +0000
Subject: Elements
From: Steve Linton <sal@dcs.st-and.ac.uk>

> However the enumeration of conjugates here is quite slow. (`Elements'
> translates to `AsSSortedList' and the
> comparison of subgroups we always need to
> translate via a niceomorphism. As SG is not a subgroup of G, there is no
> inherited ``parent niceomorphism, but it is computed every time anew.
> (I checked in a special `AsList' method in the development version such
> that at least `AsList' becomes much faster.)
> Nevertheless when acknowledging the bug report it might be worth 
> mentioning that he (I checked that Toshio is a male first name ...) 
> is using a slow approach and that taking conjugates by transversal 
> elements would be faster.

Interestingly, computing the list of conjugates via a Transversal of the 
centraliser and then sorting it is still much faster than the call of 
Elements (3 seconds against 66).

For those who've forgotten, the original message was:

As I compute subgroups of general linear groups, I meet some
trouble. 
An example is as follows.

gap> G:=GL(2,9);;
gap> SG:=Group([ [ [ 0*Z(3), Z(3)^0 ], [ Z(3)^0, 0*Z(3) ] ] ]);;
gap> IsSubgroup(G,SG);
true
gap> Elements(ConjugacyClassSubgroups(G, SG));
Error NumberFFVector: Vector not over specified field at
Error( "NumberFFVector: Vector not over specified field" );
NumberFFVector( v, arg[1]!.q ) called from
PositionCanonical( D, pnt ) called from
PermutationOp( g, D, act ) called from
Permutation( elm, HomeEnumerator( xset ), FunctionAction( xset )
 ) called from
ImagesRepresentative( nice, elm ) called from
...
Entering break read-eval-print loop, you can 'quit;' to quit to 
outer loop,
or you can return to continue



##########
 13 13 13 
##########

Date: Wed, 24 Nov 1999 16:30:33 +0100 (CET)
Subject: mutability problem
From: Franz Gaehler <gaehler@ITAP.Physik.Uni-Stuttgart.De>

In the current development version, the following mutability problem
occurs. Suppose G is a group, r a record, and f a function defining
an action of G on r. Then, the call Orbit( G, r, f );  makes the
mutable record r immutable, even though f does not change its
arguments. This is a rather undesirable side effect. GAP 4.1 fix 7,
on the other hand, works as it should.

Here is an example:

RequirePackage("crystcat");
G:=SpaceGroupOnRightBBNWZ( 4, 6, 3, 1, 2 );
r:=rec( translation := [ 0, 1/2, 0, 0 ], basis := [  ], spaceGroup := G );;
IsMutable(r);
Orbit( G, r, ImageAffineSubspaceLattice );;
IsMutable(r);
Print(ImageAffineSubspaceLattice);



##########
 14 14 14 
##########

Date: Thu, 09 Dec 1999 13:19:07 +0000
Subject: Re: Bug in ConvertToMatrixRep 
From: Steve Linton <sal@dcs.st-and.ac.uk>

> the following happens in the development version of GAP 4:
> 
gap> G := SmallGroup( 672, 760 );
<pc group of size 672 with 7 generators>
gap> IrreducibleModules( G, GF(3), 0 );;
gap> G := SmallGroup( 672, 760 );
<pc group of size 672 with 7 generators>
gap> IrreducibleModules( G, GF(3), 0 );;
Z: <q> must be a positive prime power (not a boolean) at

This is fixed now (in 4.0 and 4R1), by changes to set.c. A simple 
demonstration of the underlying bug is

l := [];
AddSet(l,729);
AddSet(l,true)
AddSet(l,3);
true in l;

The last command gives false when the bug is present. 



##########
 15 15 15 
##########

Date: Thu, 9 Dec 1999 12:14:56 GMT
Subject: committed 'GAP/4.0/lib ratfun.gi'
From: chron entry for GAP <gapchron@dcs.st-and.ac.uk>

gapchron
Thu Dec  9 12:14:56 GMT 1999

Update of /gap/CVS/GAP/4.0/lib
In directory chrystal:/tmp/cvs-serv10234

Modified Files:
	ratfun.gi 
Log Message:
fixed problem with the addition of proper rational functions
with different denominators

(The bug had been observed by J"urgen M"uller.)

before the fix:
--------------
gap> x:= Indeterminate( Rationals, "x" );;
gap> y:= Indeterminate( Rationals, "y" );;
gap> x/y + y/x;
2*x/y

correct:
-------
gap> x:= Indeterminate( Rationals, "x" );;
gap> y:= Indeterminate( Rationals, "y" );;
gap> x/y + y/x;
(x^2+y^2)/x*y



##########
 16 16 16 
##########

Date: Tue, 14 Dec 1999 13:22:07 +0100 (CET)
Subject: Re: ConjugatorAutomorphism
From: Thomas.Breuer@math.rwth-aachen.de

Mathias Kratzer wrote to the GAP Forum

> in Chapter 35, Section 5 the GAP4-manual says:
> 
> > * ConjugatorAutomorphism( G, g ) O 
> >
> > creates for g in the same Family as the elements of G 
> > the automorphism of G defined by h |--> h^{elm} for all h\in G . 
>   ~~~~~~~~~~~~~~~~~~~~~
> Reading these lines  I guess that 'ConjugatorAutomorphism'  was imple-
> mented to  sort  of generalize  the function  'InnerAutomorphism': The
> latter one  only provides access to  automorphisms of  a group G which
> are induced by elements of  G; by means of the  first one you can also
> construct "conjugations" by elements of e. g. a supergroup of G.
> 
> Of course, the mapping h |-->  h^g, for g \in S,  S a supergroup of G,
> is an automorphism of  G if and only if  G is invariant under conjuga-
> tion by g. 
> Surprisingly, the manual does not keep  its readers aware of this fact
> at all, and --- confer  the example below --- 'ConjugatorAutomorphism'
> does not even give you a warning let alone  an error message, when you
> try  to induce  an automorphism  from  an  element which  violates the
> invariance condition stated above:

gap> G := Group( [ (1,2,3,4) ] );
Group([ (1,2,3,4) ])
gap> phi := ConjugatorAutomorphism( G, (1,2) );
^(1,2)
gap> eltsG := Elements( G );
[ (), (1,2,3,4), (1,3)(2,4), (1,4,3,2) ]
gap> List(eltsG, elt -> elt^phi);
[ (), (1,3,4,2), (1,4)(2,3), (1,2,4,3) ]
gap> IsConjugatorAutomorphism(phi);
true
gap>
 
> Would the function 'ConjugatorAutomorphism' not better be called 'Con-
> jugatorISOmorphism'?  Or is there anything I've just misunderstood?

The problem is the following.

gap> G:= Group( [ (1,2,3,4) ] );;
gap> phi:= ConjugatorAutomorphism( G, (1,2) );
^(1,2)
gap> Source( phi );
Group([ (1,2,3,4) ])
gap> Range( phi );
Group([ (1,2,3,4) ])

I propose that `ConjugatorAutomorphism' shall check
that the second argument really acts on the first,
and that we introduce `ConjugatorIsomorphism',
a function that constructs its range by mapping the source;
for cases where the check shall be avoided,
`ConjugatorAutomorphismNC' can be introduced.

If there is no objection then I make the relevant changes,
and write an answer to the Forum.
(The bug will be fixed with the next bugfix.)



##########
 17 17 17 
##########

Date: Thu, 16 Dec 1999 08:03:16 -0500 (EST)
Subject: Re: Subgroup Lattice question
From: alexander Hulpke <ahulpke@math.ohio-state.edu>

Suggested response to Xiao Gang:

> Trying to add subgroup lattice into my PermGroup page
> (http://wims.unice.fr/~wims/en_tool~algebra~permgroup.en.phtml), I got
> the following output from GAP which I am unable to interprete.

There was indeed a small problem in `MaximalSubgroupsLattice' for solvable
groups which could give some wrong inclusions. This will be corrected in the
next bugfix. Let us know if you need a workaround urgently.
 
gap> List(c,Size);
[ 1, 3, 3, 3, 9, 18, 2, 6, 6 ]
gap> MaximalSubgroupsLattice(l);
[ [  ], [ [ 1, 1 ] ], [ [ 1, 1 ] ], [ [ 1, 1 ] ],
  [ [ 4, 1 ], [ 4, 2 ], [ 3, 1 ], [ 2, 1 ] ], [ [ 5, 1 ] ], [ [ 1, 1 ]
],
  [ [ 7, 1 ], [ 7, 2 ], [ 7, 3 ], [ 2, 1 ] ], [ [ 8, 1 ], [ 6, 1 ] ] ]

> The output seems to tell that the class #6, or order 6, has class #6
I suppose the first `6' in the line above you mean to be #9?



##########
 18 18 18 
##########

Date: Wed, 22 Dec 1999 14:42:47 +0100 (CET)
Subject: Re: whitespace in Help
From: Thomas.Breuer@math.rwth-aachen.de

Steve wrote

> It would be good to treat multiple whitespace as one space in matching
> help topics. It would also be good to ignore whitespace immediately 
> before or after the ?. The latter is a kernel task, which I will add to
> the list. The former is just programming in help.g, I should think.

The library part of this change is done.
Already before this change,
whitespace immediately after the `?' was silently removed.
So only the case that the `?' is not in the first column
after the `gap> ' prompt is left.



##########
 19 19 19 
##########

Date: Thu, 6 Jan 2000 09:04:19 GMT
Subject: committed 'GAP/4.0/lib morpheus.gi'
From: chron entry for GAP <gapchron@dcs.st-and.ac.uk>

gapchron
Thu Jan  6 09:04:13 GMT 2000

Update of /gap/CVS/GAP/4.0/lib
In directory chrystal:/tmp/cvs-serv14959

Modified Files:
	morpheus.gi 
Log Message:
Fixed `InnerAutomorphismsSutomorphismGroup' method;
the attribute promises a group as return value,
and the method returns a list.

The erroneous behaviour shows up for example in

gap> InnerAutomorphismsAutomorphismGroup( AutomorphismGroup(
> SmallGroup( 6, 1 ) ) );
[ ^f1, ^f2 ]

After the fix, we get

gap> InnerAutomorphismsAutomorphismGroup( AutomorphismGroup(
> SmallGroup( 6, 1 ) ) );
<group with 2 generators>



##########
 20 20 20 
##########

Date: Fri, 10 Dec 1999 14:35:41 -0500
Subject: AutomorphismGroup fails in particular instances
From: John Johnson <smiley@metalab.unc.edu>

Has anyone encountered a situation where JS Leon's backtracking programs
fail? I get the following:

gap> AutomorphismGroup(SimplexCode(4));
Bus Error

 Error: Library block code not found in specified library.
 Program was executing function read01Matrix (line 234 in file
.../../src/leon/src/readdes.c).Error usage: Group(<gen>,...),
Group(<gens>), Group(<gens>,<id>) at
Error( "usage: Group(<gen>,...), Group(<gens>), Group(<gens>,<id>)" );
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop, you can 'quit;' to quit to outer
loop,
or you can return to continue
brk> quit;
0
gap> AutomorphismGroup(SimplexCode(5));
<permutation group of size 9999360 with 18 generators>

(This was called using the package GUAVA, GAP 4.1, on an UltraSPARC 10,
Solaris 2.6.1 but it didn't look like the problem was in the code; I don't
know.)

This also occurs for the Hamming Code of redundancy 4, which has the same
automorphism group. But I have not encountered this elsewhere yet; I'll keep
an eye out.



##########
 21 21 21 
##########

Date: Wed, 19 Jan 2000 23:43:01 -0800 (PST)
Subject: Trouble with "Order" function
From: Jacob Hirbawi <jhirbawi@yahoo.com>

I ran into this problem with "Order" for this 4x4
matrix :

mat:=
 [ [ -1/3*E(5)-2/3*E(5)^2-2/3*E(5)^3-1/3*E(5)^4,
   
-1/3*E(60)^11+1/3*E(60)^19+1/3*E(60)^31-1/3*E(60)^59,
    -E(5)^2-E(5)^3,
    -2 ],
  [
1/9*E(60)^7-1/9*E(60)^23+1/9*E(60)^43-1/9*E(60)^47,
    1/6*E(5)-1/6*E(5)^2-1/6*E(5)^3+1/6*E(5)^4,
   
-1/6*E(60)^7-1/6*E(60)^11+1/6*E(60)^19+1/6*E(60)^23+1/6*E(60)^31-1/6*E(60)^43+1/6*E(60)^47-1/6*E(60)^59,
   2/3*E(60)^11-2/3*E(60)^19-2/3*E(60)^31+2/3*E(60)^59
],
  [ 0,
    1/2*E(12)^7-1/2*E(12)^11,
   -1/2,
   0 ],
  [ 5/18*E(5)+1/9*E(5)^2+1/9*E(5)^3+5/18*E(5)^4,
   
-1/18*E(60)^7+1/18*E(60)^23-1/18*E(60)^43+1/18*E(60)^47,
    1/6*E(5)+1/6*E(5)^4,
    -1/3*E(5)-2/3*E(5)^2-2/3*E(5)^3-1/3*E(5)^4 ] ];

gap> mat^10=mat^0;
true

so the matrix has a low order, but if I call
Order(mat) it seems that GAP gets stuck
(>2 minutes before I interrupt it).

I am using GAP4.1 with fix 7 (under windows 98). This
must be a new bug since I used Order with this
particular matrix in an earlier version without any
problems.


#####FURTHER ON SAME BUG (BY THOMAS) #######

Date: Thu, 20 Jan 2000 14:42:17 +0100 (CET)
Subject: strange bug
From: Thomas.Breuer@Math.RWTH-Aachen.De

Today I had sent an answer to Jacob Hirbawi who had reported
an inefficiency in the `Order' method for characteristic zero matrices.

Frank L"ubeck noticed that in the GAP code contained in this message,
erroneously the order `infinity' was returned for the following matrix.

mat:=
  [ [ -1/3*E(5)-2/3*E(5)^2-2/3*E(5)^3-1/3*E(5)^4,
      -1/3*E(60)^11+1/3*E(60)^19+1/3*E(60)^31-1/3*E(60)^59, 
      -E(5)^2-E(5)^3, 
      -2 ],
    [ 1/9*E(60)^7-1/9*E(60)^23+1/9*E(60)^43-1/9*E(60)^47,
      1/6*E(5)-1/6*E(5)^2-1/6*E(5)^3+1/6*E(5)^4,
      -1/6*E(60)^7-1/6*E(60)^11+1/6*E(60)^19+1/6*E(60)^23+1/6*E(60)^31
           -1/6*E(60)^43+1/6*E(60)^47-1/6*E(60)^59,
      2/3*E(60)^11-2/3*E(60)^19-2/3*E(60)^31+2/3*E(60)^59 ],
    [ 0, 1/2*E(12)^7-1/2*E(12)^11, -1/2, 0 ],
    [ 5/18*E(5)+1/9*E(5)^2+1/9*E(5)^3+5/18*E(5)^4,
      -1/18*E(60)^7+1/18*E(60)^23-1/18*E(60)^43+1/18*E(60)^47,
      1/6*E(5)+1/6*E(5)^4,
      -1/3*E(5)-2/3*E(5)^2-2/3*E(5)^3-1/3*E(5)^4 ] ];;

Indeed, when computing the order *the second time* one gets `infinity'.
This is because (in a new GAP) one gets the following.

    gap> MinimalPolynomial( Rationals, mat, 1 );
    -1+x_1-x_1^5+x_1^6
    gap> MinimalPolynomial( Rationals, mat, 1 );
    -2/3-1/3*x_1^2+x_1^3-2/3*x_1^5-1/3*x_1^7+x_1^8

One layer deeper, the same happens.
(Start a new GAP because `Random' calls are involved.)

    gap> ratmat:= BlownUpMat( CanonicalBasis( CF(60) ), mat );;
    gap> Matrix_MinimalPolynomialSameField( Rationals, ratmat, 1 );
    -1+x_1-x_1^5+x_1^6
    gap> Matrix_MinimalPolynomialSameField( Rationals, ratmat, 1 );
    -2/3-1/3*x_1^2+x_1^3-2/3*x_1^5-1/3*x_1^7+x_1^8

And now I am lost.
`Matrix_MinimalPolynomialSameField' uses mainly functions such as
`AddCoeffs' and `ShrinkCoeffs', and the rational vector/matrix arithmetic,
the only non-low level functionality is the `Random' call for a full row
space.
(By the way: Is there any reason --besides the possibility to find such
bugs-- to use `Random' in this function, wouldn't the standard basis
vectors be good enough?)

In a GAP version that was up-to-date in the morning of January 14th,
the problem does not occur, so it must have been introduced within
the last week.
Has anybody an idea what may have been broken?



##########
 22 22 22 
##########

Date: Fri, 21 Jan 2000 18:10:07 +0100 (CET)
Subject: Re: trivial-problems
From: Werner Nickel <nickel@mathematik.tu-darmstadt.de>

>     IsPcGroup( AbelianGroup( IsPcGroup, [1] ) );
>     DerivedSeries( AbelianGroup( [1] ) );
>     ElementaryAbelianGroup( 1 );



##########
 23 23 23 
##########

Date: 24 Jan 2000 12:58:48 +0100
Subject: Possible bugs
From: Michael Leithold <leithold@extended.de>

Gap 4.1 bugfix 7 on linux and aix:

[... cut some of report here ...]

gap> F:=SL(2,13);
SL(2,13)
gap> AutomorphismGroup(F);
Error, no method found! For debugging hints type ?Recovery from
NoMethodFound
Error no 1st choice method found for `LargestMovedPoint' on 1
arguments at
Error( no_method_found );
LargestMovedPoint( G ) called from
<function>( <arguments> ) called from read-eval-loop



##########
 24 24 24 
##########

Date: Fri, 21 Jan 2000 12:44:55 +0000
Subject: Re: SmithNormalForm 
From: Steve Linton <sal@dcs.st-and.ac.uk>

> Volkmar Felsch observed
> 
>     gap> a := [[13, 5, 7], [17, 31, 39]];
>     [ [ 13, 5, 7 ], [ 17, 31, 39 ] ]
>     gap> SmithNormalFormIntegerMat( a );
>     List Element: <list>[3] must have an assigned value at
>     S[m][m] := 0;
>     ...

Fixed now (it already worked for matrices that had more rows than columns).



##########
 25 25 25 
##########

Date: Tue, 25 Jan 2000 15:40:24 +0100 (CET)
Subject: About "IrreducibleRepresentations"
From: Thomas.Breuer@Math.RWTH-Aachen.De

> I used the function "IrreducibleRepresentations" with GAP4.
> It works for the group A(4) but not for the group A(5), why?
> 
> gap> g:= AlternatingGroup( 5 );;
> gap> repr:= IrreducibleRepresentations( g );
> Error no method found for operation IrreducibleRepresentations with 1
> argument

Apparently the complex irreducible representations of A5 are required,
which is beyond the scope of GAP.
(Only the Baum/Clausen method is available, which works for abelian
by supersolvable groups.)

However, when trying the same question in finite characteristic, I get

    gap> IrreducibleRepresentations( AlternatingGroup( 5 ), GF(2) );
    Error, no method found! For debugging hints type ?Recovery from
    NoMethodFound
    Error no 1st choice method found for `GroupHomomorphismByImagesNC' on 4
    arguments at
    [...]

At that stage, the irreducible modules have been computed successfully,
only the construction of the homomorphisms via a pcgs fails.
So the question is why a pcgs is required.
(A second question is why the homomorphisms constructed in the solvable
case via a pcgs are correct, since the modules are computed independent
of the pcgs.)



##########
 26 26 26 
##########

Date: Fri, 28 Jan 2000 13:40:20 +0000
Subject: KM Briggs' question.
From: Steve Linton <sal@dcs.st-and.ac.uk>

A user ("Dr K.M. Briggs" <kmb28@cus.cam.ac.uk>) reported a problem, which 
boils down to the following:

gap> g := SimplifiedFpGroup(Image(IsomorphismFpGroup(SmallGroup(29,1))));
<fp group on the generators [ F1 ]>
gap> h := Subgroup(g,[g.1]);
Group([ F1 ])
gap> AugmentedCosetTableMtc(g,h,1,"x");
Lists Assignment: <list> must be a mutable list at
list[i] := - list[i];
RelatorRepresentatives( grels ) called from
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return and ignore the assignment to continue
brk> 

The list which is being modified is the ExtRepOfObj of a word in the free 
group. I am not sure whether the error is that this not mutable or that
RelatorRepresentatives is modifying it.



##########
 27 27 27 
##########

Date: Fri, 21 Jan 2000 14:02:23 -0600 (CST)
Subject: Bug in DefaultFieldOfMatrix
From: Scott Murray <murray@math.uchicago.edu>

Has anyone other than myself experienced the
following bugs:

gap> ReadTest("tst/algsc.tst");
+ Error, no method found! For debugging hints type ?Recovery from NoMethodFound
+ Error : no 1st choice method found for `DefaultFieldOfMatrix' on 1 arguments
+ Variable: 'orb' must have a value
+ Variable: 'permgrp' must have a value
- 720
+ $Id: allreportedbugs.details,v 4.3 2000/03/06 16:12:31 gap Exp $
+ GAP4stones: 39554
true

gap> q:= QuaternionAlgebra( FieldByGenerators( Rationals, [ ER(3) ] ) );
<algebra-with-one of dimension 4 over NF(12,[ 1, 11 ])>
gap> gens:= GeneratorsOfAlgebra( q );
[ e, i, j, k ]
gap> e:= gens[1];; 
gap> DefaultFieldOfMatrix( [[e]] );
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error no 1st choice method found for `DefaultFieldOfMatrix' on 1 arguments at
Error( no_method_found );
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return to continue

The first occurs in my copy of the gap development
version but not in the release version of gap
4.0.  The second seems to have the same root 
cause, but occurs in both versions of gap.



##########
 28 28 28 
##########

Date: Fri, 28 Jan 2000 18:18:59 -0500 (EST)
Subject: Re: bug in MinimalPolynomial
From: alexander Hulpke <ahulpke@math.ohio-state.edu>

> There appears to be a bug in MinimalPolynomial:
> 
> gap> A := [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ];
> [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ]
> gap> MinimalPolynomial(GF(2),A);
> Error, no method found! For debugging hints type ?Recovery from NoMethodFound

This problem was due to your changes in matrix.gi. Methods were installed
for `IsRing' and thus got a lower rank. The method which claims to be
applicable now is the one for finite fields. (In fact it should not do this.
I think the family predicate is wrong there.) I have reverted the matrix.gi
change and things are back to normal.



##########
 29 29 29 
##########

Date:           Fri, 28 Jan 2000 22:02:00 +0200
Subject:        Lie nilpotent group rings
From: "Alexander B. Konovalov" <algebra@hotmail.zp.ua>

it is evident that the associated Lie algebra of a modular group algebra of,
for example , a dihedral group of order 128 over GF(2) is Lie nilpotent. As
you could see below, this result is confirmed by LAG share package, but
without LAG we obtained the negative answer. Is this a bug or I am doing
something wrong in the 1st part of the test ?

1.)
gap> G:=DihedralGroup(128);
<pc group of size 128 with 7 generators>
gap> F:=GF(2);
GF(2)
gap> FG:=GroupRing(F,G);
<algebra-with-one over GF(2), with 7 generators>
gap> L:=LieAlgebra(FG);
<Lie algebra of dimension 128 over GF(2)>
gap> IsLieNilpotent(L);
false

2.)
gap> RequirePackage("lag");
true
gap> FH:=GroupRing(F,G);
<algebra-with-one over GF(2), with 7 generators>
gap> M:=LieAlgebra(FH);
<Lie algebra over GF(2)>
gap> IsLieNilpotent(M);
true



##########
 30 30 30 
##########

Date: Sat, 29 Jan 2000 11:52:55 -0500 (EST)
Subject: bug in GAP 8-bit matrix/vector representation
From: Gene Cooperman <gene@ccs.neu.edu>

I think I found a bug in GAP's strategy for converting to 8 bit
matrix representation.  Read the details of the bug below,
before returning here to read my proposed BUG fixes.
Which fix you want depends on your strategy.

The issue arises because a power of a matrix over GF(9) can
be a matrix over GF(3).
The issue seems to resolve around the comment in vec8bit.gi:DegreeFFE :
  # the degree could be smaller. Check or prove.

So, DegreeFFE() is eager to find the smaller field, GF(3).  If higher code
believes this, the higher code will start using GF(3) while the internal
vector representation remains GF(9).  For example, DefaultFieldOfMatrix()
calls DegreeFFE() and concludes that the field
should be GF(3).  ConvertToMatrix(mat,DefaultFieldOfMatrix(mat)) can then
be called with the field GF(3).  ConvertToMatrix() then signals an error,
because it detects that a row vector has internal representation over
GF(9), and not GF(3).  For a simple example from GAP's top level that
could lead a user into this bug, see below.

The right fix depends on what design philosophy you want to take.
I list my proposed fixes in order of preference.
1)  You could modify vec8bit.gi:ffe.gi:DegreeFFE() to accept
    the field given by the 8-bit internal representation
    even though all of its field elements are also in a smaller field.
2)  You could modify DefaultFieldOfMatrix() to work harder to
    take into account the field of each row vector, by calling
    Q_VEC8BIT() on each row of the matrix.
3)  ConvertToMatrixRep() could promote the matrix m3 to a matrix
    over GF(9) despite the call requesting a matrix over GF(3).
4)  ConvertToMatrixRep() could demote the matrix m3 to a matrix
    over GF(3) by modifying the internal representation of its row vector
    or providing a new row vector.  This risks inefficiency, since
    computations over GF(9) may sink into GF(3) and then pop up
    to GF(9) again.
5)  You could modify ProjectiveOrder() to work harder to
    find the true field of a matrix.
6)  The manual could be modified to tell the user not to create
    new matrices like m3.  (Personally, I don't like this last solution.)

#=========================================================================
#EXAMPLE USAGE THAT LEADS TO THE ABOVE BUG.  I SUSPECT THAT THE BUG
#  WOULD ALSO ARISE IN OTHER CONTEXTS.

gap> m1:=Immutable([[Z(3^2)]]);
[ [ Z(3^2) ] ]
gap> ConvertToMatrixRep(m1);
9
gap> m2:=m1^4;
[ [ Z(3) ] ]
gap> m3:=[m2[1]];
[ [ Z(3) ] ]
# m3 now satisfies:
#   Is8BitMatrixRep(m3) = false
#   Is8BitVectorRep(m3[1]) = true
#   DefaultFieldOfMatrix(m3) = GF(3)
#   Q_VEC8BIT(m3[1]) = 9
gap> Order(m3);
Error ConvertTo8BitMatrixRep( <mat>, <q> ): not all entries of <mat> written o\
ver <q> at
Error( 
 "ConvertTo8BitMatrixRep( <mat>, <q> ): not all entries of <mat> written over \
<q>" );
ConvertToMatrixRep( imat, fld ); called from
MinimalPolynomialMatrixNC( F, mat, inum ) called from
MinimalPolynomial( r, e, 1 ) called from
MinimalPolynomial( DefaultFieldOfMatrix( mat ), mat ) called from
ProjectiveOrder( mat ) called from
...
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return to continue

# ProjectiveOrder() uses DefaultFieldOfMatrix() to conclude the field size is 3
# ConvertToMatrixRep() checks Q_VEC8BIT() for each row and signals an
#   an error because the internal vector rep. is for a field of size 9, not 3



##########
 31 31 31 
##########

Date: Mon, 31 Jan 2000 14:46:13 +0100 (CET)
Subject: Re: [Fwd: committed 'GAP/4.0/lib pquot.gi']
From: Werner Nickel <nickel@mathematik.tu-darmstadt.de>

gap> C := CyclicGroup( 2 );;
gap> G := WreathProduct( C, C );;
gap> G := WreathProduct( G, C );;
gap> H := Image( IsomorphismFpGroup( G ) );;
gap> qs := PQuotient( H, 2, 10 );;
gap> Size( GroupByQuotientSystem( qs ) ) = 128;
true



##########
 32 32 32 
##########

Date: Tue, 1 Feb 2000 14:41:57 +0100 (CET)
Subject: Re: algebra
From: Thomas.Breuer@Math.RWTH-Aachen.De (reply to Sean Hallgren)

you wrote to gap-trouble.

> It seems to me that the following show return zero for both calls
> to dimension.  I construct an algebra that only contains zero, and
> then I mulitply it by something.
> 
> G:=SymmetricGroup(2);
> A:=GroupRing(GaussianRationals,G);
> emb:=Embedding(G,A);
> z:=Zero(A)*A;
> a:=z*()^emb;
> #Dimension(z)=0
> #Dimension(a)=1

Thank you very much for this report.
This bug will be fixed in the next version of GAP 4.



##########
 33 33 33 
##########

Date: Wed, 19 Jan 2000 11:14:36 GMT
Subject: Re: Bug report on Guava 1.4 for GAP4
From: Willem de Graaf <wdg@dcs.st-and.ac.uk> (reply to Emanuel Viterbo)

> I have some trouble with Goppa Codes
> Here is the problem
> 
> gap> x := Indeterminate( GF(2), "x" );;  
> gap> L := Elements( GF(8) );;   
> gap> G := x^2+x+1;; 
> gap> C := GoppaCode( G, L );
> Error, no method found! For debugging hints type ?Recovery from
> NoMethodFound
> Error no 1st choice method found for `CoefficientsRing' on 1 arguments
> at
> Error( no_method_found );
> CoefficientsRing( DefaultRing( p ) ) called from

In my version of Guava I cannot reproduce this error. 
Could you maybe at the brk> prompt type `p;' to see what
the value of `p' is at that stage (and send me the result)?



##########
 34 34 34 
##########

Date: Mon, 7 Feb 2000 16:28:38 GMT
Subject: lag and intersection
From: Willem de Graaf <wdg@dcs.st-and.ac.uk>

gap> G:= Group( (1,2));
Group([ (1,2) ])
gap> FG:= GroupRing( GF(2), G );;
gap> L1:= LieAlgebra( FG );;
gap> B1:= Basis( L1 );;
gap> IsLieObjectsModuleRep:= IsLieObjectsModule;
<Operation "IsLieObjectsModule">
gap> RequirePackage("lag");
true
gap> FH:= GroupRing( GF(2), G );;
gap> L2:= LieAlgebra( FG );;
gap> B2:= Basis( L2 );;
gap> Intersection( B1, B2 ); 
[ v.2, v.1 ]
gap> L2:= LieAlgebra( FH );;
gap> B2:= Basis( L2 );;
gap> Intersection( B1, B2 );
[ v.1 ]



##########
 35 35 35 
##########

Date: Wed, 22 Dec 1999 15:03:00 +0100 (CET)
Subject: Re: ElementaryAbelianGroup( 1 )
From: Werner Nickel <nickel@mathematik.tu-darmstadt.de>

I am following up Hans-Ulrich's mail about the trivial elementary
abelian group. Personally, I think that the trivial group is not
elementary abelian but the problem he raises is really with trivial
pc-groups and needs to be fixed.  This has been on the list for a
while and it's time to get it out of the way.

Playing with ElementaryAbelianGroup() I observed the following:

gap> G := ElementaryAbelianGroup( IsPermGroup, 6 );
Group([ (1,2), (3,4,5) ])
gap> IsElementaryAbelian( G );
false
gap> ElementaryAbelianGroup( IsPcGroup, 6 );
Error <n> must be a prime power at
[...]

There are some inconsistencies here.  I would define an elementary
abelian group as a group which is isomorphic to a direct product of
cyclic groups or order p, p a prime.  Sometimes people define
elementary abelian in a somewhat more general way.  The (only) method
for IsElementaryAbelian checks if the generators of the group have
order dividing p for a prime p.  If no one objects, I add an error
message to ElementaryAbelianGroup() for PermGroups.
 
Unrelated, but found along the lines is this:

gap> ApplicableMethod( ElementaryAbelianGroupCons, [IsPermGroup,6] );   
fail

##  ##  ## Below is what we want for the first example 
        ## (rather than the creation of Group([ (1,2), (3,4,5) ])

gap> G := ElementaryAbelianGroup( IsPermGroup, 6 );
Error <n> must be a prime power at
Error( "<n> must be a prime power" );
ElementaryAbelianGroupCons( arg[1], arg[2] ) called from
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return to continue
brk>



##########
 36 36 36 
##########

Date: Thu, 3 Feb 2000 13:49:21 -0500 (EST)
Subject: Re: FactorGroup
From: alexander Hulpke <ahulpke@math.ohio-state.edu>

John wrote:
> Using the released version, I create
> gap> f:= FreeGroup(1);
> gap> x:=GeneratorsOfGroup(f)[1];
> gap> g:=Group(x^2);
> gap> IsNormal(f,g);
> gap> quo:=FactorGroup(f,g);     
> Record: '<rec>.freeGroup' must have an assigned value at
> return GeneratorsOfGroup( ElementsFamily( FamilyObj( G ) )!.freeGroup );
> FreeGeneratorsOfWholeGroup( N ) called from
> func( elm ) called from
> List( Ggens, function ( elm )
>       return MappedWord( elm, FreeGeneratorsOfWholeGroup( N ), 
>          GeneratorsOfGroup( Q ) );
>   end ) called from
> oper( super, sub ) called from
> NaturalHomomorphismByNormalSubgroupNC( G,

So how would one go to debug this:
Lets first see where we are: `NaturalHomomorphismByNormalSubgroupNC' gets
called, this calls `NaturalHomomorphismByNormalSubgroupOp' (because the way
the function/attribute pairs are created, this operation is displayed as
`oper' in the backtrace. Usually if you encounter `oper' the operation is
just the same name as the previous function just with an added `Op')

The error we get is that a method is (via `FreeGeneratorsOfWholeGroup')
looking for a !.freeGroup component in
the elements family. This is missing. So we could have two errors: Either
the component is indeed missing or we fell into a wrong method.

If we now look at the calling method (in grpfp.gi) 
for `NaturalHomomorphismByNormalSubgroupNCOrig', we see that this is a
method for subgroups of fp groups (there is no special method for free
groups) which is applicable because every free group is also an fp group.
So the method seems alright, the `freeGroup' component is missing.

If we now search how this component is created, we find it is specially set
to the elements family when fp groups are created. Its not set for free
groups.

So we have to add one line in `grpfree.gi' which creates free groups. The
elements family gets assigned the component !.freeGroup. (in line 512)

With this change (I have commited) the example runs through. Voil'a.



##########
 37 37 37 
##########

Date: Mon, 07 Feb 2000 14:46:43 +0000
Subject: IsIntegerMatrixGroup
From: Steve Linton <sal@dcs.st-and.ac.uk>

In a private email, a GAP user reported to me:

gap> f;
Group([ [ [ 0, 1 ], [ 1, 0 ] ], [ [ 11, 2 ], [ 8, 12 ] ], [ [ 11, 4 ], [ 7, 5 
] ] ])
gap> Order(f);                                                                 
  FFE operations: divisor must not be zero at
  rat := NumeratorRat( rat ) * One( ffe ) / DenominatorRat( rat );
  GeneratorsOfGroup( grp ) called from
  IsFinite( G ); called from
  <function>( <arguments> ) called from read-eval-loop
  Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
  or you can return a new divisor to continue

The problem comes from the method:

InstallMethod( IsIntegerMatrixGroup, true, [ IsCyclotomicMatrixGroup ], 0,
    G -> ForAll( Flat( GeneratorsOfGroup( G ) ), IsInt ) );

in grpramat.gi

A quick fix is to also check for Determinant +-1 of all generators, but this 
is relatively expensive. Is there a cheaper way?



##########
 38 38 38 
##########

Date: Sun, 30 Jan 2000 15:34:52 +0100 (CET)
Subject: Re: minor bug in GAP startup
From: Werner Nickel <nickel@mathematik.tu-darmstadt.de> (reply to gene)

> Sorry.  I can't reproduce it in a simple version.  The bug seems to
> be more subtle than I reported.  Since it is unusual, you may
> simply ignore the bug.  But if you're interested, here's what I do:
> ===
> 
> 
> 1)  I'm on RedHat 4.1  (I still haven't upgraded.)
> 2)  I set up my .gaprc with an error.  In my latest test, a .gaprc
>     file with a single line was enough:
>                             Read := 3;
> 3)  I cd to the bin directory, and I type:  ./gap.sh
> 4)  GAP reports:

> Variable: 'Read' is read only
> not in any function
> Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
> or you can return after making it writable to continue
> brk> 
> 
> 5) I type ^D
> 6) GAP prints the  gap>  prompt.
> 7) I type:
> Read("../../solmxgrp-new.gi");
> 8) GAP prints another gap> prompt on the next line, without executing.
> 9) I use the up-arrow to bring back the input line:
> Read("../../solmxgrp-new.gi");
> 10) This time, GAP prints:
> 
> operation already installed at
> INSTALL_METHOD_ARGS( oper, func );
> operation already installed at
> INSTALL_METHOD_ARGS( oper, func );
> operation already installed at
> INSTALL_METHOD_ARGS( oper, func );
> operation already installed at
> INSTALL_METHOD_ARGS( oper, func );
> HELLO.  THIS IS solmxgrp-new.gi
> 
> 11) It's possible the bug is related to my use of Read().  I haven't
> seen the bug when I tried something simple like typing the number:  3

I managed to reproduce the bug. The file tttt contains: 

Print( "1\n"); Print( "1a\n");
Print( "2\n");
Print( "3\n");
Print( "4\n");
Print( "5\n");

This is what happens:

brk> 
gap> Read("tttt");
1
gap> 

Obviously, GAP executes only the first command in the file.
The bug is not specific to the .gaprc file.  If an error occurs in
any of the files on the gap command line, the same behaviour happens.
However, if you don't quit from the break loop, but type return, the
bug does not happen.  



##########
 39 39 39 
##########

Date: Wed, 26 Jan 2000 15:01:36 -0500 (EST)
Subject: Re: p groups
From: Gene Cooperman <gene@ccs.neu.edu>

Scott,
    I've tested a bug that you sent me on the original GAP release
and on gapdev at St. Andrews.  I don't see any bug.  You reported:

===

gap> G := Group([ [ [ 0*Z(3), Z(3)^0 ], [ Z(3), 0*Z(3) ] ],
>   [ [ Z(3)^0, Z(3) ], [ Z(3), Z(3) ] ] ]);            
Group([ [ [ 0*Z(3), Z(3)^0 ], [ Z(3), 0*Z(3) ] ], 
  [ [ Z(3)^0, Z(3) ], [ Z(3), Z(3) ] ] ])
gap> IsNilpotent(G);
true
gap> Size(G);
[ I SEE THE CORRECT ANSWER, 8, BUT YOU WROTE YOU SEE THE STUFF BELOW. ]
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error no 2nd choice method found for `MakeHomChain' on 1 arguments at
Error( no_method_found );
MakeHomChain( G ) called from
ChainSubgroup( G ); called from
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return to continue



##########
 40 40 40 
##########

Date: Mon, 07 Feb 2000 09:49:42 +0000
Subject: One last bug in alltest
From: Steve Linton <sal@dcs.st-and.ac.uk>

Running alltest (in a system checked out last Friday), has just one unresolved 
bug, which shows up in grpconst.tst, but might come from somewhere else.

To reproduce

RequirePackage("grpconst");
gap> ConstructAndTestAllGroups := function( size )
> local grps;
>     grps := ConstructAllGroups( size );
>    if Length( grps ) <> NumberSmallGroups( size ) then
>        Print( "wrong number of groups of size ", size, "\n" );
>    fi;
>    if Set( List( grps, IdGroup ) ) <>
>       List( [ 1 .. NumberSmallGroups( size ) ], x -> [ size, x ] ) then
>        Print( "wrong ids for the groups of size ", size, "\n" );
>    fi;
> end;
gap> ConstructAndTestAllGroups( 840 );;

The problem seems to arise with a group automorphism (gens[1] at the point of 
the break loop) which has somehow got unequal source and range and so is not 
in IsEndoGeneralMapping and lacks a One.

In fact, something very odd is happening around this object:

brk> Source(gens[1]) = H;
true
brk> Range(gens[1]) = H; 
true
brk> Source(gens[1]) = Range(gens[1]);
true
brk> IsEndoGeneralMapping(gens[1]);
false
brk> Source(gens[1]);
<pc group of size 14 with 2 generators>
brk> Range(gens[1]);
<pc group of size 14 with 2 generators>
brk> last = last2;
false
brk> 

The behaviour is the same whether the autpgrp package is there or not.



##########
 41 41 41 
##########

Date: Mon, 7 Feb 2000 17:14:52 +0100 (CET)
Subject: Re: One last bug in alltest
From: Thomas.Breuer@Math.RWTH-Aachen.De

Alexander observed

> > The actual object for the first mapping is broken. It doesn't have 
> > IsEndoGeneralMapping
> 
> This is due to `SetIsConjugatorAutomorphism' to false.
> `IsConjugatorAutomorphism' is now declared to be a synonym for
> `IsEndoGeneralMapping and IsConjugatorIsomorphism'.
> 
> I suppose setting it to false sets both constituents to `false', which is
> not the logical negation (but lacking `or' the only thing one can do).
> 
> What might help is to change this declaration. I don't have time at the
> moment to look into this (probably I can do it this or tomorrow afternoon).
> 
> This might mean also other `and' declarations of properties could be
> affected by a similar problem.

Indeed there is a problem:

    gap> g:= Group(());;
    gap> f1:= NewFilter("f1");;  f2:= NewFilter("f2");;  f3:= f1 and f2;;
    gap> SetFilterObj( g, f3 );
    gap> f1(g);  f2(g);
    true
    true
    gap> ResetFilterObj( g, f3 );
    gap> f1(g);  f2(g);
    false
    false

Apparently we have never thought about what it means to set an
``and-filter'' to `false'!
I have no idea how to deal with this situation in general.

In the example, the correct filter one wants to set to `false'
is `IsConjugatorIsomorphism', in order to express that an *outer*
automorphism of the group in question is given --this group is
known to be abelian.
(However, if the automorphism is in fact the identity
--there was a discussion about this-- then it *is* of course a
conjugator isomorphism!)



##########
 42 42 42 
##########

Date: Thu, 27 Jan 2000 14:38:54 +0100 (CET)
Subject: Re: p groups
From: Thomas.Breuer@Math.RWTH-Aachen.De

- `IsPGroup' is declared as a property for any group, so the
  finiteness requirement will cause the method to be not applicable
  to groups that know to be abelian but do not know whether they are
  finite.
  (This case is probably unusual.)
  Until yesterday, the generic method for `IsPGroup' also required
  `IsFinite',
  so calling `IsPGroup' for a group that does not know whether it is
  finite (e.g., a newly created f.p. group) gave a ``no method found''
  error.
  I have now changed the generic method not to require `IsFinite',
  so in principle the more specific method may require `IsFinite'.



##########
 43 43 43 
##########

Date: Tue, 1 Feb 2000 14:27:58 -0500 (EST)
Subject: bug in group homomorphism?
From: Gene Cooperman <gene@ccs.neu.edu>

I seem to have an example of a homomorphism from one group to another
group, such that the kernel of the homomorphism is a monoid.
The generators of the "monoid" kernel are all members of the
source group.  Yet GAP does not realize that the monoid is a group.
The example follows below.  I would guess this should be easy to fix.

# ===============================

src := Group(
[ [ [ Z(3)^0, Z(3), Z(3)^0, Z(3), 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), Z(3), Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), Z(3)^0, Z(3)^0 ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), Z(3)^0, Z(3)^0 ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), Z(3), Z(3)^0 ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, Z(3), Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, Z(3), 0*Z(3), Z(3), 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, Z(3)^0, Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ] ]
);

img := Group(
[ [ [ Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), Z(3), Z(3) ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), Z(3)^0, Z(3)^0 ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
      [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ] ]
);

elt := [ [ Z(3)^0, Z(3), Z(3)^0, Z(3), 0*Z(3) ],
  [ 0*Z(3), Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ], 
  [ 0*Z(3), 0*Z(3), Z(3)^0, Z(3)^0, 0*Z(3) ], 
  [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
  [ 0*Z(3), 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ];

fun := h->Comm( h, elt );

hom := GroupHomomorphismByFunction( src, img, fun );

ker := Kernel(hom);

# ker is:  <monoid with 81 generators>
#  even though it should be a subgroup of src, which is a group.
#  I confirmed that List(ker,INV); works, producing inverses.

ForAny( GeneratorsOfMagmaWithOne(ker), g->g in src); # => true



##########
 44 44 44 
##########

Date:           Fri, 04 Feb 2000 12:29:23 -0800
From: Bill Thurston <wpt@math.ucdavis.edu>
Subject:        Problem with GQuotients

	Nathan Dunfield and I have been using GAP to try to search
through subgroups of finite index in fundamental groups of three-manifolds,
to test the conjecture that there are always subgroups of finite index
with epimorphisms to Z; we've been checking the Census of 10,000
3-manifolds.  GQuotients is usually effective for finding the
desired subgroups, but sporadically, it bombs, as illustrated in the
following session, (quoted from email from Nathan):
|
|I've looked into it and it's really bizarre.  Its
|definately a bug of some sort.  The problem is that it somehow manages
|to create an immutable list where it usually creates a mutable one.
|So if "re-enter" the list in break mode and continue, the function
|finishes fine.  Further calls to GQuotients produce correct answers.
|Look at this:
|
|gap>  F := FreeGroup(["a","b"]);;  a := F.1;; b := F.2;;
|gap>  G := F/[ a^3*b^3*a^3*b^-1*a^-1*b^-1*a^-1*b^-1, a*b^4*a^4*b^4*a*b*a*b ];;
|gap>  GQuotients(G, AlternatingGroup(5));
|Lists Assignment: <list> must be a mutable list at
|list[i] := - list[i];
|RelatorRepresentatives( grels ) called from
|AugmentedCosetTableMtc( G, H, -1, "_x" ) called from
|Size( FpGroupPresentation( p ) ) called from
|ExcludedOrders( F, List( Fgens, function ( i )
|        return e;
|    end ) ) called from
|<function>( <arguments> ) called from read-eval-loop
|...
|brk> list;
|[1, 40]
|
|# Let's confirm "list" is immutable;
|
|brk> list[1] := 2;
|Lists Assignment: <list> must be a mutable list
|...
|brk_02> quit;
|
|# Now "fix" the problem, and the function finishes fine.
|
|brk> list := [1,40];
|[ 1, 40 ]
|brk> return;
|[  ]
|
|# and now it works again.
|
|gap> GQuotients(G, CyclicGroup(20));
|[ [ a, b ] -> [ f2*f3^2, f1 ] ]
|
|There's nothing special about the choice of alternating group in the
|first call to GQuotients, everything else I tried produced the same
|result.



##########
 45 45 45 
##########

Date: Thu, 03 Feb 2000 14:13:23 +0000
Subject: Testing
From: Steve Linton <sal@dcs.st-and.ac.uk>

testall currently gives 4 problems. 
This looks like two real problems: SetModuleOfExtension and something with 
Subspaces.
I am inclined to move grpconst.tst out of testall, because users might not 
have the package, or might not have TeXed the documentation. Maybe we should 
have
extratst.g  or something that gathers everything that is not in testall.

        >>>>>>>>>>>>>>>>>>1<<<<<<<<<<<<<<<

testing: /scratch/4.0/tst/grpmat.tst
+ Variable: 'SetModuleOfExtension' must have an assigned value
- 24
grpmat.tst             87666           1170    (next ~ 3 sec)

         >>>>>>>>>>>>>>>>>2<<<<<<<<<<<<<<<

### for this, see next bug....

        >>>>>>>>>>>>>>>>>>>>>3<<<<<<<<<<<<<<<<<<<<<<<<<<<

testing: /scratch/4.0/tst/morpheus.tst
+ Variable: 'SetModuleOfExtension' must have an assigned value
+ Variable: 'autd8' must have a value
- 8

        >>>>>>>>>>>>>>>>>>>>>4<<<<<<<<<<<<<<<<<<<<<<<<<<<

testing: /scratch/4.0/tst/grpconst.tst
+ #I  Package `grpconst': cannot load documentation, no manual index file 
`doc/m\
+ anual.six'
+ #I -------- The AutPGroup share package ----------
+ #I -- Computing automorphism groups of p-groups --
+     -----------------------------------------------
+     ---- Algorithms to construct finite groups ----
+     ----- Hans Ulrich Besche and Bettina Eick -----
+     -----------------------------------------------
+     --------------- See ?GrpConst -----------------
+     -----------------------------------------------
-     ----------------------------------------------- 
-     ---- Algorithms to construct finite groups ---- 
-     ----- Hans Ulrich Besche and Bettina Eick ----- 
-     ----------------------------------------------- 
-     --------------- See ?GrpConst ----------------- 
-     ----------------------------------------------- 
+ Variable: 'SetModuleOfExtension' must have an assigned value
+ Variable: 'SetModuleOfExtension' must have an assigned value
+ Variable: 'SetModuleOfExtension' must have an assigned value
+ Variable: 'SetModuleOfExtension' must have an assigned value
+ Variable: 'SetModuleOfExtension' must have an assigned value
grpconst.tst        16097410           9280



##########
 46 46 46 
##########

Date: Thu, 03 Feb 2000 14:13:23 +0000
Subject: Testing
From: Steve Linton <sal@dcs.st-and.ac.uk>

### see also the previous bug, since these reported together.

testing: /scratch/4.0/tst/vspcrow.tst
+ Variable: 'SubspacesDim' must have a value
- Subspaces( ( GF(3^2)^3 ), 2 )
+ Variable: 'subsp' must have a value
- 91
+ Variable: 'subsp' must have a value
+ [ -5, 5, 1 ]
- VectorSpace( GF(3^2),
- [ [ Z(3)^0, 0*Z(3), 0*Z(3) ], [ 0*Z(3), Z(3)^0, Z(3^2)^5 ] ] )
+ Variable: 'SubspacesAll' must have a value
- Subspaces( ( GF(3^2)^3 ), "all" )
+ Variable: 'subsp' must have a value
- 184
+ Variable: 'subsp' must have a value
+ [ -5, -3, -1 ]
- VectorSpace( GF(3^2), [ [ Z(3)^0, 0*Z(3), Z(3^2)^3 ] ] )
vspcrow.tst            75660           2720    (next ~ 6 sec)



##########
 47 47 47 
##########

Subject: Bug
From: Michael Leithold <leithold@extended.de>
Date: 12 Feb 2000 16:22:18 +0100

gap4r1 on linux with 7 bugfixes installed.

gap> G:=CyclicGroup(3);;
gap> kappa:=NaturalHomomorphismByNormalSubgroup(G, G);;
gap> F:=ImagesSource(kappa);;
gap> alpha:=Elements(F)[1];;
gap> PIE:=PreImagesElm(kappa, alpha);;
gap> PIR:=PreImagesRepresentative(kappa, alpha);;

The last two commands both kill gap.



##########
 48 48 48 
##########

Date: Mon, 14 Feb 2000 16:34:29 -0500 (EST)
From: Gene Cooperman <gene@ccs.neu.edu>
Subject: small bug in Print()

I found a small bug in GAP's Print().  (More precisely, the referee
for a paper of mine on ParGAP found this bug.)  Because ParGAP
tries to read back in the result of a Print(), this affects the
correctness of ParGAP.  I illustrate the bug in terms of GAP's Print():

gap> Print(x -> (((x * x * x)^2)^2)^2 * x);
function ( x )
    return (x * x * x) ^ 2 ^ 2 ^ 2 * x;

When ParGAP try to read back in what GAP displays, it gets:

gap> Syntax error: '^' is not associative in stream line 11
              return (x * x * x) ^ 2 ^ 2 ^ 2 * x;
                                     ^

This is the same error message as if I had typed at the terminal:
gap> function ( x )
>     return (x * x * x) ^ 2 ^ 2 ^ 2 * x;
Syntax error: '^' is not associative
    return (x * x * x) ^ 2 ^ 2 ^ 2 * x;
                           ^


##########
 49 49 49           ## sun specific??
##########

Date: Tue, 15 Feb 2000 13:01:55 -0600 (CST)
From: Scott Murray <murray@math.uchicago.edu>
Subject: Re: Problem with 'MinimalPolynomial'

On Tue, 15 Feb 2000, alexander Hulpke wrote:

> Thomas and Steve both reported they cannot reproduce the problem.
> 
> I tried it now on a Linux machine -- everything works fine there.
> 
> On the sun in my office I still get varying results, most of them wrong. 
> (Scott: Do you use a sun as well?)
> 
> I will try to investigate this further. Should I add the problem to a
> testfile as well?
> 

I am using a sun.  Here is another example of the
bug.  It was the first thing I did in gap after
doing a complete update and remake:

GAP4, Version: 4.dev of today, sparc-sun-solaris2.7-gcc
gap> A := [ [ Z(2^2)^2, 0*Z(2), Z(2^2), 0*Z(2), 0*Z(2), 0*Z(2) ], 
>   [ Z(2^2)^2, 0*Z(2), Z(2^2)^2, Z(2)^0, Z(2^2)^2, Z(2)^0 ], 
>   [ 0*Z(2), Z(2)^0, 0*Z(2), Z(2^2)^2, 0*Z(2), Z(2^2)^2 ], 
>   [ 0*Z(2), Z(2^2), Z(2^2), Z(2^2), Z(2^2)^2, 0*Z(2) ], 
>   [ Z(2^2)^2, Z(2^2)^2, Z(2^2)^2, 0*Z(2), 0*Z(2), 0*Z(2) ], 
>   [ Z(2)^0, Z(2)^0, 0*Z(2), Z(2^2), 0*Z(2), Z(2^2)^2 ] ];
[ [ Z(2^2)^2, 0*Z(2), Z(2^2), 0*Z(2), 0*Z(2), 0*Z(2) ], 
  [ Z(2^2)^2, 0*Z(2), Z(2^2)^2, Z(2)^0, Z(2^2)^2, Z(2)^0 ], 
  [ 0*Z(2), Z(2)^0, 0*Z(2), Z(2^2)^2, 0*Z(2), Z(2^2)^2 ], 
  [ 0*Z(2), Z(2^2), Z(2^2), Z(2^2), Z(2^2)^2, 0*Z(2) ], 
  [ Z(2^2)^2, Z(2^2)^2, Z(2^2)^2, 0*Z(2), 0*Z(2), 0*Z(2) ], 
  [ Z(2)^0, Z(2)^0, 0*Z(2), Z(2^2), 0*Z(2), Z(2^2)^2 ] ]
gap> F := GF(4);
GF(2^2)
gap> MinimalPolynomial(F, A);
Z(2)^0+Z(2^2)*x_1+x_1^2+Z(2^2)^2*x_1^3+Z(2^2)^2*x_1^4+Z(2^2)*x_1^5+x_1^6
gap> MinimalPolynomial(F, A);
Z(2)^0+Z(2^2)*x_1+x_1^2+Z(2^2)^2*x_1^3+x_1^4+Z(2^2)*x_1^5+x_1^6
gap> MinimalPolynomial(F, A);
Z(2)^0+Z(2^2)*x_1+x_1^2+Z(2^2)^2*x_1^3+Z(2^2)*x_1^4+Z(2^2)*x_1^5+x_1^6
gap> MinimalPolynomial(F, A);
Z(2)^0+Z(2^2)*x_1+x_1^2+Z(2^2)^2*x_1^3+x_1^4+Z(2^2)*x_1^5+x_1^6
gap> MinimalPolynomial(F, A);
Z(2)^0+Z(2^2)*x_1+x_1^2+Z(2^2)^2*x_1^3+x_1^4+Z(2^2)*x_1^5+x_1^6

I think this would be a good thing to add to the
test file.



##########
 50 50 50 
##########

From: Leonard Soicher <L.H.Soicher@qmw.ac.uk>
Date: Tue, 15 Feb 2000 18:36:42 GMT
Subject: trouble with GRAPE under 4.2pre1a

I installed GAP 4.2 prerelease 1a, and had the following trouble using GRAPE:

gap> AutGroupGraph(JohnsonGraph(4,2));
Function: number of arguments must be 3 (not 2) at
SetStabChainMutable( gp, StabChainBaseStrongGenerators( GRAPE_dr_base, 
   GRAPE_dr_sgens ) );
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop, you can 'quit;' to quit to outer loop,
or you can return a list of arguments to continue
brk> 

I am planning a few small changes to GRAPE to be released with GAP 4.2,
so I won't mind making a few more if necessary.



##########
 51 51 51 
##########

Date: Wed, 16 Feb 2000 11:53:24 +1100
From: Andrew Solomon <andrews@dcs.st-and.ac.uk>
Subject: last fix to 4.dev

The following at the bottom will run without error in 4.dev after the 
commit with the following message.

Andrew

===========
Subject: 
       committed 'GAP/4.0/lib mgmcong.gi'
   Date: 
       Wed, 16 Feb 2000 00:43:33 GMT
  From: 
       chron entry for GAP <gapchron@dcs.st-and.ac.uk>
    To: 
       gap-commit@dcs.st-and.ac.uk




gapchron
Wed Feb 16 00:43:33 GMT 2000

Update of /gap/CVS/GAP/4.0/lib
In directory chrystal:/tmp/cvs-serv5599

Modified Files:
        mgmcong.gi 
Log Message:
When creating a magma congruence, make sure it knows
it is a semigroup congruence when it knows
the magma is a semigroup.
AS


===================================



f:=FreeMonoid("a","b");
a:=GeneratorsOfMonoid(f)[1];
b:=GeneratorsOfMonoid(f)[2];
e:=Identity(f);
m:=f/[[a*a,e],[b*b*b,e],[a*b*a*b*a*b,e]];
k:=KnuthBendixRewritingSystem(m);
MakeConfluent(k);
a:=GeneratorsOfSemigroup(m)[2];
b:=GeneratorsOfSemigroup(m)[3];
e:=GeneratorsOfSemigroup(m)[1];
ab:=MagmaCongruenceByGeneratingPairs(m,
  [[a*b,b*a],[a*e,e*a],[b*e,e*b]]);
h:=m/ab;



##########
 52 52 52 
##########

Date: Wed, 16 Feb 2000 15:45:38 +0000
From: "Isabel M. Araujo" <isabel@dcs.st-and.ac.uk>  ## Burkhard Hoefling
To: jjm <jjm@dcs.st-and.ac.uk>
Subject: [Fwd: committed 'GAP/4.0/lib wordass.gi']

the file wordass.gi that I have just commited fixes the bug reported by
Burkhard in IsBasicWreathLessThanOrEqual
in gap4dev.

He gives the following example


F := FreeSemigroup (3, "d");
d1 := GeneratorsOfSemigroup (F)[1];
d2 := GeneratorsOfSemigroup (F)[2];
d3 := GeneratorsOfSemigroup (F)[3];

pairs := [
        [ d1*d2*d3*d2*d1*d2*d1,
          d1*d2*d3*d1*d2*d1^2*d2*d1^2 ],
        [ d2*d3*d1^2*d2*d1^2*d2*d3*d2*d1,
          d2*d3*d2*d1*d2*d1^2*d2*d3*d1*d2*d1 ],
        [ d2*d1^2*d2*d3*d2*d1*d2*d3*d1^2*d2,
          d2*d1^2*d2*d3*d1*d2*d1^2*d2*d3*d2 ],
        [ d2*d1^2*d2*d3*d1,
          d2*d1^2*d2*d3*d2*d1^2*d2*d1^2*d2 ] ];

List (pairs, p -> [ IsBasicWreathLessThanOrEqual (p[1], p[2]),
                                        IsBasicWreathLessThanOrEqual 
(p[2], p[1])]);

which returns 
[ [ false, false ], [ false, false ], [ false, false ], [ false, false ]
]

which is wrong. With the fix the same code returns 

[ [ true, false ], [ true, false ], [ true, false ], [ true, false ] ]



##########
 53 53 53 
##########

Date: Thu, 17 Feb 2000 09:59:15 +0100 (CET)
From: Thomas.Breuer@Math.RWTH-Aachen.De
Subject: error in completion files

Yesterday I checked in some data files which cannot be read when
they are translated to completion files.
The reason is that the completion file contains lines of the following form.

    l:=[[1..4],[2.\
    .5]];

Breaking between the two dots in a range constructor seems to be forbidden.



##########
 54 54 54 
##########

Date: Fri, 18 Feb 2000 12:01:49 +0100 (CET)
From: Thomas.Breuer@Math.RWTH-Aachen.De
Subject: bug in printing rational functions

J"urgen M"uller observed that currently the following happens in GAP 4.

    gap> x:= Indeterminate( Rationals, 1 );
    x_1
    gap> y:= Indeterminate( Rationals, 2 );
    x_2
    gap> 1/(x*y);
    1/x_1*x_2

The `PrintObj' and `String' methods for rational functions
use the function `ExtRepOfPolynomial_String',
which can be asked for putting brackets around the expression
if sums occur;
but for the denominator, one needs brackets also if products occur.
(I am not sure what is the best way to fix this bug,
perhaps add another optional boolean argument?)



##########
 55 55 55 
##########



