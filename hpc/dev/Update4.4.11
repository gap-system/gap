%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%W  Update                      GAP Maintenance
%%
%%
%Y  Copyright (C)  2005,  Lehrstuhl D f√ºr Mathematik,  RWTH Aachen,  Germany
%%
%%  This file is intended to list the changes that will be published with
%%  the next update of GAP.
%%  The information is used for producing the announcement of the update,
%%  the additions to `tst/bugfix.tst', and an HTML page that lists the
%%  known bugs and intended new features.
%%
%%  For adding a change, just copy one of the templates below to the end of the
%%  file, and enter the relevant information.
%%
%%  Formal rules for this file, to allow simple parsing by a script:
%%          - lines starting with `%' are comments and are ignored
%%          - lines starting with `!' describe the type of information
%%            in the following lines until the next `!'-line
%%          - each entry must be finished with an `! End' line, otherwise
%%            the order of entries is irrelevant
%%          - the text behind the `!' is case and whitespace insensitive
%%

%%%%%%%%%%%%  short template without comments, below is a longer one  %%%%%%%%
! Date

! Changed by

! Reported by

! Type of Change
Fix: wrong result
Fix: inappropriate error message
Fix: infinite loop
Fix: efficiency issue
Fix: crash
Fix: internal data corruption
Fix: improved error handling
New: extended functionality
New: new functionality
New: improved documentation

! Description

! Test Code

! Prefetch

! Changed Files

! End



%%%%%%%%%%%%  Template with explanatory comments    %%%%%%%%%%%%%%%%%%%%%%%%%%
% When the change was checked in, format 'yyyy/mm/dd':
! Date

% Initials should suffice here:
! Changed by

% Only if applicable:
! Reported by

% Choose one or more entries and/or add new ones; but always use either
% the 'Fix:' or the 'New:' prefix
! Type of Change
Fix: wrong result
Fix: inappropriate error message
Fix: infinite loop
Fix: efficiency issue
Fix: crash
New: extended functionality
New: new functionality
New: improved documentation

% For the description use (X)HTML (preferred) or plain text:
% For HTML use in particular the following markup:
%     for package names: <span class="pkgname">...</span>
%     for GAP names: <span class="code">...</span>
! Description

% If possible, provide some code in test file format which allows to check
% if a change was applied to an installation. Provide input and output,
% including prompts, exactly as in a GAP session.
! Test Code

% If possible, provide some information about a temporary fix, workaround,
% ..., maybe with a link to some longer description or a file with some
% code. Use (X)HTML here.
! Prefetch

% White space separated list of paths relative to the GAP root directory.
% (This is implicitly contained in the data of the CVS repository, but in
% case of problems after changes it may be convenient to have this
% information here.)
! Changed Files

% Finish your entry with this:
! End

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2007/10/05
! Changed by
MN
! Type of Change
New: extended functionality
! Description
Make dynamic loading of modules possible on CYGWIN using a DLL based
approach. Also move to using autoconf version 2.61.
! Changed Files
Makefile.in
configure
configure.in
cnf/aclocal.m4
cnf/configure.out
src/gap.c
src/gapw95.c   (new file)
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2007/10/10
! Changed by
TB
! Type of Change
Fix: infinite loop
! Description
The function <mixer manual="Reference: IsomorphismTypeInfoFiniteSimpleGroup">
<span class="code">IsomorphismTypeInfoFiniteSimpleGroup</span></mixer>
can be called with a positive integer instead of a group,
and then returns information about the simple group(s) of this order.
(This feature is currently undocumented.)
For the argument 1, however, it ran into an infinite loop.
! Test Code
gap> IsomorphismTypeInfoFiniteSimpleGroup( 1 );;
! Changed Files
lib/grp.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2007/10/15
! Changed by
FL
! Reported by
Laurent Bartholdi
! Type of Change
Fix: error instead of return
! Description
A lookup in an empty dictionary entered a break loop. Now returns 'fail'.
! Test Code
gap> d:=NewDictionary(3213,true);;
gap> LookupDictionary(d,4);
fail
! Changed Files
lib/dict.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2007/10/15
! Changed by
FL
! Reported by
Paul Smith
! Type of Change
Fix: rename macro parameter
! Description
The c++ keyword 'and' is no longer be used as a macro parameter in the
kernel.
! Changed Files
src/opers.h
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2007/12/14
! Changed by
MN
! Reported by
Stefan Kohl
! Type of Change
Fix: wrong result
! Description
MemoryUsage on objects with no subobjects left them in the cache and
thus reported 0 in subsequent calls to MemoryUsage for the same
object.
! Test Code
gap> a := [1..100];;
gap> MemoryUsage(a)=MemoryUsage(a);
true
! Changed Files
lib/object.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/01/02
! Changed by
AH
! Reported by
Angel del Rio
! Type of Change
Fix: wrong result
! Description
Irr(G) might be missing characters.
! Test Code
gap> G:=SmallGroup(1308,1);
<pc group of size 1308 with 4 generators>
gap> Length(Irr(G));
48
! Changed Files
lib/ctblgrp.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/02/13
! Changed by
TB
! Type of Change
Fix: wrong result
! Description
Up to now, it was allowed to call the function
<mixer manual="Reference: FullMatrixAlgebraCentralizer">
<span class="code">FullMatrixAlgebraCentralizer</span></mixer>
with a field and a list of matrices such that the entries of the matrices
were not contained in the field;
in this situation, the result did not fit to the documentation.
Now the entries of the matrices are required to lie in the field,
if not then an error is signaled.
! Test Code
! Changed Files
lib/algebra.gd
lib/algmat.gi
tst/algmat.tst
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/02/29
! Changed by
TB
! Type of Change
New: extended functionality
! Description
One can now call
<mixer manual="Reference: Basis"><span class="code">Basis</span></mixer>,
<mixer manual="Reference: Iterator"><span class="code">Iterator</span></mixer>
etc. with the return value of the function
<mixer manual="Reference: AlgebraicExtension">
<span class="code">AlgebraicExtension</span></mixer>.
! Test Code
gap> f:= GF(2);; x:= Indeterminate( f );; p:= x^2+x+1;;
gap> e:= AlgebraicExtension( f, p );;
gap> GeneratorsOfLeftModule( e );;  Basis( e );;  Iterator( e );;
! Changed Files
lib/fieldfin.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/03/19
! Changed by
TB
! Reported by
Stefan Kohl
! Type of Change
Fix: wrong result
! Description
For those finite fields that are regarded as field extensions over
non-prime fields (one can construct such fields with
<mixer manual="Reference: AsField"><span class="code">AsField</span></mixer>),
the function <mixer manual="Reference: DefiningPolynomial">
<span class="code">DefiningPolynomial</span></mixer>
erroneously returned a polynomial w.r.t. the extension of the prime field.
! Test Code
gap> DefiningPolynomial( AsField( GF(9), GF(3^6) ) );
x_1^3+Z(3^2)^6*x_1^2+Z(3^2)*x_1+Z(3^2)^5
! Changed Files
lib/ffe.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/03/26
! Changed by
TB
! Type of Change
New: extended functionality
! Description
The function <mixer manual="Reference: FrobeniusCharacterValue">
<span class="code">FrobeniusCharacterValue</span></mixer>
returned <span class="code">fail</span> for results that require
a finite field with more than 65536 elements.
Meanwhile <span class="pkgname">GAP</span> can handle larger finite fields,
so this restriction was removed.
(It is still possible that
<mixer manual="Reference: FrobeniusCharacterValue">
<span class="code">FrobeniusCharacterValue</span></mixer>
returns <span class="code">fail</span>.
! Test Code
gap> FrobeniusCharacterValue( E(55), 2 );
z+z2+z3+z4+z5+z6+z8+z10+z12+z13+z14+z16+z17+z19
! Changed Files
lib/ctblfuns.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/04/03
! Changed by
JS
! Type of Change
Fix: infinite loop
! Description
The operation <mixer manual="Reference: KernelOfMultiplicativeGeneralMapping">
<span class="code">KernelOfMultiplicativeGeneralMapping</span></mixer> has
methods designed to handle maps between permutation groups in a two-step approach,
but did not reliably trigger the second step.  This has now been fixed, preventing
a slow infinite loop repeating the first step.  This was normally only seen
as part of a larger calculation.
! Test Code
gap> LoadPackage("atlasrep");;
gap> g:=(Group(AtlasGenerators("HS",1,4).generators));;
gap> ConjugacyClassesMaximalSubgroups(g);; 
! Changed Files
lib/ghomperm.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/04/10
! Changed by
SK
! Type of Change
Fix: infinite loop
! Description
There were two methods for the operation
<mixer manual="Reference: Intersection2">
<span class="code">Intersection2</span></mixer> which have implicitly assumed
that finiteness of a collection can always be decided. Now, these methods
check for <mixer manual="Reference: HasIsFinite">
<span class="code">HasIsFinite</span></mixer> and
<mixer manual="Reference: CanComputeSize">
<span class="code">CanComputeSize</span></mixer> prior to calling
<mixer manual="Reference: IsFinite">
<span class="code">IsFinite</span></mixer>.
! Changed Files
lib/coll.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/04/15
! Changed by
SK
! Type of Change
New: improved functionality
! Description
The method for <mixer manual="Reference: View">
<span class="code">View</span></mixer>
for polynomial rings has been improved, and methods for
<mixer manual="Reference: String">
<span class="code">String</span></mixer> and
<mixer manual="Reference: ViewString">
<span class="code">ViewString</span></mixer> for polynomial rings
have been added.
! Test Code
gap> PolynomialRing(GF(2),1);
GF(2)[x_1]
gap> String(PolynomialRing(GF(8),4));
"PolynomialRing( GF(2^3), [ x_1, x_2, x_3, x_4 ] )"
gap> ViewString(PolynomialRing(GF(2),1));
"GF(2)[x_1]"
! Changed Files
lib/ringpoly.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/04/14
! Changed by
SK
! Type of Change
New: improved functionality
! Description
Methods for testing membership in general linear groups and special linear
groups over the integers have been added. 
! Test Code
gap> [[4,5],[5,6]] in GL(2,Integers);
true
gap> [[4,5],[5,6]] in SL(2,Integers);
false
! Changed Files
lib/grpramat.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/04/14
! Changed by
SK
! Type of Change
New: improved functionality
! Description
Methods for <mixer manual="Reference: String">
<span class="code">String</span></mixer> and
<mixer manual="Reference: ViewString">
<span class="code">ViewString</span></mixer> for full row modules have
been added. Further, a default method for
<mixer manual="Reference: IsRowModule">
<span class="code">IsRowModule</span></mixer> has been
added, which returns <mixer manual="Reference: false">
<span class="code">false</span></mixer> for objects
which are not free left modules.
! Test Code
gap> String(Integers^3);
"( Integers^3 )"
gap> ViewString(GF(16)^3);
"( GF(2^4)^3 )"
gap> IsRowModule(1);
false
! Changed Files
lib/modulrow.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/04/14
! Changed by
SK
! Type of Change
New: improved functionality
! Description
A <mixer manual="Reference: ViewString">
<span class="code">ViewString</span></mixer> method for objects with name
has been added.
! Test Code
gap> G := Group((1,2));;
gap> SetName(G,"C2");
gap> ViewString(G);
"C2"
! Changed Files
lib/object.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/04/23
! Changed by
TB
! Type of Change
Fix: wrong result
! Description
Since the release of <span class="pkgname">GAP</span> 4.4.10,
the return values of the function
<mixer manual="Reference: QuaternionAlgebra">
<span class="code">QuaternionAlgebra</span></mixer>
were not consistent w.r.t. the attribute
<mixer manual="Reference: GeneratorsOfAlgebra">
<span class="code">GeneratorsOfAlgebra</span></mixer>;
the returned list could have length four or five.
Now always the list of elements of the canonical basis is returned.
! Test Code
gap> GeneratorsOfAlgebra( QuaternionAlgebra( GF(17) ) );
[ e, i, j, k ]
gap> GeneratorsOfAlgebra( QuaternionAlgebra( GF(17) ) );
[ e, i, j, k ]
! Changed Files
lib/algsc.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/06/05
! Changed by
FL
! Type of Change
New: extended functionality
! Description
<mixer manual="Reference: Binomial"><span
class="code">Binomial(n, k)</span></mixer> now works with huge <span
class="code">n</span>.
! Test Code
gap> Binomial(2^80,3);
294474510796397388263882186039667753853121547637256443485296081974067200
! Changed Files
lib/combinat.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/06/24
! Changed by
FL
! Reported by
AH
! Type of Change
Fix: inappropriate error message
! Description
Made error message in case of corrupted help book information
(manual.six file) shorter and more informative. 
! Test Code
# none, we hope that the changed code is never needed!
! Changed Files
lib/helpdef.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/06/27
! Changed by
AH
! Reported by
Paul Smith
! Type of Change
Fix: wrong result
! Description
MonomialGrevlexOrder calculated a wrong ordering in certain cases.
! Changed Files
lib/groebner.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/07/20
! Changed by
Laurent Bartholdi
! Reported by
Matthew Fayers
! Type of Change
Fix: wrong result
! Description
The (<span class="pkgname">GAP</span> kernel) method for the operation
<mixer manual="Reference: IntersectSet">
<span class="code">IntersectSet</span></mixer> for ranges had two bugs,
which could yield a result range with either too few or too many elements.
As a consequence, for example the <mixer manual="Reference: Intersection">
<span class="code">Intersection</span></mixer> results for ranges could be
wrong.
! Test Code
gap> Intersection( [ -1 .. 1 ], [ -1 .. 1 ] ); # previously was empty
[ -1 .. 1 ]
gap> Intersection( [ 2, 4 .. 10 ], [ 3 .. 5 ] ); # previously was [ 4, 6 ]
[ 4 ]
! Changed Files
src/range.c
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/08/13
! Changed by
TB
! Type of Change
New: improved documentation
! Description
The function <mixer manual="Reference: InducedClassFunctionsByFusionMap">
<span class="code">InducedClassFunctionsByFusionMap</span></mixer>
is now documented.
! Changed Files
doc/build/ctblfuns.msk
lib/ctblfuns.gd
lib/ctblfuns.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/08/13
! Changed by
SL
! Reported by
Jia Huang 
! Type of Change
Fix: wrong result
Fix: inappropriate error message
Fix: efficiency issue
! Description
Fixed a bug in the short-form display of elements of larger finite fields, a bug in some
cross-field conversions and some inefficiencies and a missing method in the LogFFE code.
! Test Code
gap> Z(3,20) + Z(3,20)^0;
1+z
gap> AA := Z(3^10)^30683;
Z(3^10)^30683
gap> BB := Z(3)^0+Z(3^15)^3+Z(3^15)^4+2*Z(3^15)^5+2*Z(3^15)^8+2*Z(3^15)^10+2*Z(3^15)^11+Z(3^15)^13;
1+z3+z4+2z5+2z8+2z10+2z11+z13
gap> AA=BB;
false
gap> RT := Z(3^6);
Z(3^6)
gap> DD := Z(3^12)+Z(3^12)^2+2*Z(3^12)^3+2*Z(3^12)^4+Z(3^12)^5+Z(3^12)^6+Z(3^12)^7+Z(3^12)^8+2*Z(3^12)^9;
z+z2+2z3+2z4+z5+z6+z7+z8+2z9
gap> LogFFE(DD,RT);            
340
! Changed Files
lib/ffeconway.gi
tst/ffeconway.tst
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/08/15
! Changed by
SL
! Reported by
AH
! Type of Change
Fix: crash
! Description 
Under certain circumstances the kernel code for position in blists
would access a memory location just after the end of the blist. If
this location was not accessible, a crash could result. Correct this
and clean up the code.
! Changed Files
src/blister.c
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/08/29
! Changed by
TB
! Type of Change
Fix: improved error handling
! Description
<span class="pkgname">GAP</span> cannot call methods with more than six
arguments.
Now the functions <mixer manual="Prg Tutorial: NewOperation">
<span class="code">NewOperation</span></mixer>,
<mixer manual="Prg Tutorial: DeclareOperation">
<span class="code">DeclareOperation</span></mixer>, and
<mixer manual="Prg Tutorial: InstallMethod">
<span class="code">InstallMethod</span></mixer>
signal an error if one attempts to declare an operation or to install
a method with more than six arguments.
! Changed Files
lib/oper.g
lib/oper1.g
lib/oprtpcgs.gi
lib/system.g
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/09/02
! Changed by
FL
! Reported by
AH
! Type of Change
Fix: wrong result
! Description
In rare cases <mixer manual="Reference: SmithNormalFormIntegerMatTransforms">
<span class="code">SmithNormalFormIntegerMatTransforms</span></mixer>
returned a wrong normal form (the version without transforming matrices 
did not have this problem). This is fixed.
! Test Code
gap> SmithNormalFormIntegerMatTransforms(
> [ [ 2, 0, 0, 0, 0 ], [ 2, 2, 0, -2, 0 ], [ 0, -2, -2, -2, 0 ],
>   [ 3, 1, -1, 0, -1 ], [ 4, -2, 0, 2, 0 ], [ 3, -1, -1, 2, -1 ],
>   [ 0, 4, -2, 0, 2 ], [ 2, 2, 0, 2, 2 ], [ 0, 0, 0, 0, 0 ],
>   [ 2, 0, -4, -2, 0 ], [ 0, -2, 4, 2, -2 ], [ 2, -2, 0, -2, -1 ],
>   [ 3, -3, -1, 1, 0 ] ]).normal;
[ [ 1, 0, 0, 0, 0 ], [ 0, 1, 0, 0, 0 ], [ 0, 0, 1, 0, 0 ], [ 0, 0, 0, 2, 0 ], 
  [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0 ], 
  [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0 ], 
  [ 0, 0, 0, 0, 0 ] ]
! Prefetch
! Changed Files
lib/matint.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/09/10
! Changed by
TB
! Type of Change
Fix: efficiency issue
! Description
Up to now, <mixer manual="Reference: IsOne">
<span class="code">IsOne</span></mixer> had a special method for general
mappings, which was much worse than the generic method;
this special method has now been removed.
! Test Code
gap> g:= AlternatingGroup( 10 );;                                   
gap> gens:= GeneratorsOfGroup( g );;                                 
gap> hom:= GroupHomomorphismByImagesNC( g, g, gens, gens );;         
gap> IsOne( hom ); # This took (almost) forever before the change ...
true
! Changed Files
lib/mapping.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/09/10
! Changed by
TB
! Type of Change
Fix: wrong result
! Description
The variant of the function <mixer manual="Reference: StraightLineProgram">
<span class="code">StraightLineProgram</span></mixer> that takes a string
as its first argument returned wrong results if the last character of this
string was a closing bracket.
! Test Code
gap> Display( StraightLineProgram( "a(ab)", [ "a", "b" ] ) );
# input:
r:= [ g1, g2 ];
# program:
r[3]:= r[1];
r[4]:= r[1]*r[2];
r[5]:= r[3]*r[4];
# return value:
r[5]
! Changed Files
lib/straight.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/09/11
! Changed by
AH
! Reported by
Maxim Hendriks
! Type of Change
Fix: wrong display
! Description
When printing elements of an algebraic extension parentheses around
coefficients were missing.
! Test Code
gap> x:=Indeterminate(CF(7));;
gap> K:=AlgebraicExtension(CF(7),x^2-3);;
gap> a:=GeneratorsOfField(K)[1];;
gap> x2 := E(7)+a*(E(7)^2+E(7)^3);
(E(7)^2+E(7)^3)*a+E(7)
! Changed Files
lib/algfld.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/09/18
! Changed by
AH
! Type of Change
Fix: wrong result
! Description
The code for central series in a permutation group used too tight a bound
and thus falsely return a nilpotent permutation group as non-nilpotent.
! Test Code
gap> g:=Group((14,15)(16,17), (12,13), (9,10,11), (4,8)(16,17),
> (1,8)(2,3)(4,5)(6,7)(16,17), (1,3)(2,8)(4,6)(5,7)(16,17));;
gap> IsNilpotent(g);
true
! Changed Files
lib/pcgsperm.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/10/01
! Changed by
TB
! Type of Change
New: extended functionality
! Description
The return values of the function
<mixer manual="Reference: QuaternionAlgebra">
<span class="code">QuaternionAlgebra</span></mixer>
now store that they are division rings (if optional parameters are given
then of course ths depends on these parameters).
! Test Code
gap> QuaternionAlgebra( Field( [ EB(5) ] ) );;
gap> IsDivisionRing( QuaternionAlgebra( Field( [ EB(5) ] ) ) );
true
! Changed Files
lib/algsc.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/11/16
! Changed by
TB
! Reported by
G'abor Nagy
! Type of Change
Fix: wrong result
! Description
The function <mixer manual="Reference: AsGroup">
<span class="code">AsGroup</span></mixer> must return
<span class="code">fail</span> if its argument is a collection
whose elements do not form a group.
However, there were situations where erroneously a corrupted
group object was returned.
! Test Code
gap> t:= [ [ 1, 2, 3, 4, 5 ], [ 2, 1, 4, 5, 3 ], [ 3, 5, 1, 2, 4 ],
>          [ 4, 3, 5, 1, 2 ], [ 5, 4, 2, 3, 1 ] ];;
gap> m:= MagmaByMultiplicationTable( t );;
gap> IsAssociative( m );
false
gap> AsGroup( m );
fail
! Changed Files
lib/grp.gi
! End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Date
2008/11/16
! Changed by
TB
! Reported by
Mohamed Barakat
! Type of Change
Fix: wrong result
! Description
So-called <mixer manual="Prg Tutorial: Immediate Methods">immediate methods
</mixer> are used throughout the system
for automatically deriving attribute values for objects
under conditions that guarantee that the computation is very cheap.
However, up to now there were situations where the requirements for such a
method were fulfilled but still the method was not called.
! Test Code
gap> att:= NewAttribute( "att", IsObject );
gap> prop1:= NewProperty( "prop1", IsObject );
gap> prop2:= NewProperty( "prop2", IsObject );
gap> InstallTrueMethod( prop2, prop1 );
gap> InstallImmediateMethod( att, Tester( prop2 ), 0, G -> 1 );
gap> # The intended behaviour is that `prop1' implies `prop2',
gap> # and that a known value of `prop2' triggers a method call
gap> # that yields the value for the attribute `att'.
gap> g:= Group( (1,2,3,4), (1,2) );;
gap> Tester( att )( g ); Tester( prop1 )( g ); Tester( prop2 )( g );
false
false
false
gap> Setter( prop1 )( g, true );
gap> # Now `prop1' is `true',
gap> # the logical implication sets also `prop2' to `true',
gap> # thus the condition for the immediate method is satisfied.
gap> Tester( prop1 )( g ); Tester( prop2 )( g );
true
true
gap> Tester( att )( g );  # Here we got `false' before the fix.
true
! Changed Files
lib/type1.g
src/c_type1.c
! End

