# We want Ubuntu 14.04 "Trust" instead of 12.04 "Precise" to get newer
# and less buggy gcov
dist: trusty
language: c

env:
  global:
    - CFLAGS="--coverage -O2"
    - LDFLAGS="--coverage"
    # default config flags: enable debug asserts
    - CONFIGFLAGS="--enable-debug"

addons:
  apt_packages:
    - libgmp-dev
    - libreadline-dev

matrix:
  include:
    # general test suite (subsumes testinstall tests, too)
    - env: TEST_SUITES="docomp testtravis"
    # the same in 32 bit mode, and with debugging turned off, to (a) make it
    # a lot faster, and (b) to make sure nobody accidentally put some vital
    # computing into code that is only run when debugging is on.
    - env: TEST_SUITES="docomp testtravis" ABI=32 CONFIGFLAGS=""
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          - libgmp-dev:i386
          - libreadline-dev:i386

    # compiler packages and run package tests
    - env: TEST_SUITES=testpackages
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          - libgmp-dev
          - libgmp-dev:i386         # for anupq
          - libreadline-dev
          - libboost-dev            # for NormalizInterface
          - libmpfr-dev             # for float
          - libmpfi-dev             # for float
          - libmpc-dev              # for float
          #- libfplll-dev           # for float
          - pari-gp                 # for alnuth
          - libzmq3-dev             # for ZeroMQInterface

    - env: TEST_SUITES=testpackages ABI=32
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          - libgmp-dev:i386
          - libreadline-dev:i386
          - libncurses5-dev:i386    # for Browse
          - libcurl4-openssl-dev:i386 # for curlInterface
          - libboost-dev:i386       # for NormalizInterface
          - libmpfr-dev:i386        # for float
          - libmpfi-dev:i386        # for float
          - libmpc-dev:i386         # for float
          #- libfplll-dev:i386      # for float
          - pari-gp:i386            # for alnuth
          - libzmq3-dev:i386        # for ZeroMQInterface

    # OS X builds: since those are slow and limited on Travis, we only run testinstall
    # OS X builds are currently disabled because Travis has performance problems
    # - env: TEST_SUITES="docomp testinstall"
    #  os: osx
    #  compiler: clang

    # test creating the manual
    - env: TEST_SUITES=makemanuals
      addons:
        apt_packages:
          - texlive-latex-base
          - texlive-latex-recommended
          - texlive-latex-extra
          - texlive-extra-utils
          - texlive-fonts-recommended
          - texlive-fonts-extra

    # run tests contained in the manual
    - env: TEST_SUITES=testmanuals

    # HPC-GAP builds (for efficiency, we don't build all combinations)
    - env: TEST_SUITES="docomp testtravis" ABI=64 HPCGAP=yes

    # out of tree builds -- these are mainly done to verify that the build
    # system work in this scenario. Since we don't expect the test results to
    # vary compared to the in-tree builds, we turn off coverage reporting by
    # setting NO_COVERAGE=1; this has the extra benefit of also running the
    # tests at least once with the ReproducibleBehaviour option turned off.
    - env: TEST_SUITES="docomp testinstall" NO_COVERAGE=1 ABI=64 BUILDDIR=build
    # for 32bit mode, also turn off debugging (see elsewhere in this file for
    # an explanation)
    - env: TEST_SUITES="docomp testinstall" NO_COVERAGE=1 ABI=32 BUILDDIR=build CONFIGFLAGS=""
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          #- libgmp-dev:i386    # do not install GMP, to test that GAP can build its own
          - libreadline-dev:i386

    # test Julia integration
    - env: TEST_SUITES="testinstall" JULIA=yes

    # run bugfix regression tests
    - env: TEST_SUITES=testbugfix

    # test error reporting and compiling (quickest job in this test suite)
    - env: TEST_SUITES="testspecial test-compile"

    # test libgap
    - env: TEST_SUITES="testlibgap"

script:
  - set -e
  - gcov --version
  - bash etc/ci-prepare.sh
  - bash etc/ci.sh

after_script:
  - set -e
  - bash etc/ci-gather-coverage.sh
  - bash <(curl -s https://codecov.io/bash)

notifications:
  slack:
    secure: Nvt9q2kZ/n7HyFeEYt7rvXMBLIR3AqSbQ54UeoU2UFrF+y0vJONChfa0csneyXPApH+objSUgS8ZW3g4gRiKtnO1jzQq9XDe895HtadY4vxYrduRLiwqI4o0k9KFVBPX7uIUXT22qIaAYBFC93m36zQKIAVDFzYuPoQfTWY3Yww=
    on_pull_requests: false
    on_success: change # default: always
    on_failure: change # default: always
