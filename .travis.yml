# Force Ubuntu 16.04 "Xenial" to get newer GCC, binutils etc.
dist: xenial
language: c

env:
  global:
    - CFLAGS="--coverage -O2 -g"
    - CXXFLAGS="--coverage -O2 -g"
    - LDFLAGS="--coverage"
    # default config flags: enable debug asserts
    - CONFIGFLAGS="--enable-debug"
    - COVERALLS_PARALLEL=true

addons:
  apt_packages:
    - libgmp-dev
    - libreadline-dev
    - zlib1g-dev
    - python
    - python-pip
    - perl

#
# The following test jobs are roughly sorted by duration, from longest to
# shortest.
#
matrix:
  include:
    # general test suite (subsumes testinstall tests, too)
    - env: TEST_SUITES="docomp teststandard"

    # the same in 32 bit mode, and with debugging turned off, to (a) make it
    # a lot faster, and (b) to make sure nobody accidentally puts some vital
    # computing into code that is only run when debugging is on.
    - env: TEST_SUITES="docomp teststandard" ABI=32 CONFIGFLAGS=""
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          - libgmp-dev:i386
          - libreadline-dev:i386
          - zlib1g-dev:i386

    # HPC-GAP builds (for efficiency, we don't build all combinations)
    - env: TEST_SUITES="docomp teststandard" ABI=64 HPCGAP=yes

    # compile packages and run GAP tests
    # don't use --enable-debug to prevent the tests from taking too long
    - env: TEST_SUITES="testpackages testinstall-loadall" ABI=64
      dist: bionic # avoid 'atexit' linker error in packages using C++ code
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          - libgmp-dev
          - libreadline-dev
          - zlib1g-dev
          - libboost-dev            # for NormalizInterface
          - libmpfr-dev             # for float
          - libmpfi-dev             # for float
          - libmpc-dev              # for float
          #- libfplll-dev           # for float
          - pari-gp                 # for alnuth
          - libzmq3-dev             # for ZeroMQInterface

    # compile packages and run GAP tests in 32 bit mode
    # it seems profiling is having trouble collecting the coverage data here, so we
    # use NO_COVERAGE=1
    - env: TEST_SUITES="testpackages testinstall-loadall" ABI=32 NO_COVERAGE=1 
      dist: bionic # avoid 'atexit' linker error in packages using C++ code
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          - libgmp-dev:i386
          - libreadline-dev:i386
          - zlib1g-dev:i386
          - libncurses5-dev:i386    # for Browse
          - libcurl4-openssl-dev:i386 # for curlInterface
          - libboost-dev:i386       # for NormalizInterface
          - libmpfr-dev:i386        # for float
          - libmpfi-dev:i386        # for float
          - libmpc-dev:i386         # for float
          #- libfplll-dev:i386      # for float
          - pari-gp:i386            # for alnuth
          - libzmq3-dev:i386        # for ZeroMQInterface

    # OS X builds: since those are slow and limited on Travis, we only run testinstall
    - env: TEST_SUITES="docomp testinstall"
      os: osx
      compiler: clang

    # test creating the manual
    - env: TEST_SUITES=makemanuals
      addons:
        apt_packages:
          - texlive-latex-base
          - texlive-latex-recommended
          - texlive-latex-extra
          - texlive-extra-utils
          - texlive-fonts-recommended
          - texlive-fonts-extra

    # run tests contained in the manual
    - env: TEST_SUITES=testmanuals

    # run bugfix regression tests
    # Also Turn on '--enable-memory-checking' to make sure GAP compiles with the flag enabled.
    # We do not actually test the memory checking, as this slows down GAP too much.
    - env: TEST_SUITES=testbugfix CONFIGFLAGS="--enable-memory-checking"

    # out of tree builds -- these are mainly done to verify that the build
    # system work in this scenario. Since we don't expect the test results to
    # vary compared to the in-tree builds, we turn off coverage reporting by
    # setting NO_COVERAGE=1; this has the extra benefit of also running the
    # tests at least once with the ReproducibleBehaviour option turned off.
    #
    # The '--enable-valgrind' checks that GAP builds and runs correctly when
    # compiled with valgrind support. We do not actually run any tests using
    # valgrind, as it is too slow.
    #
    # Also change the compiler to GCC 4.7, to ensure we stay compatible
    # with that older version.
    - env: TEST_SUITES="docomp testinstall" NO_COVERAGE=1 ABI=64 BUILDDIR=build CONFIGFLAGS="--enable-valgrind CC=gcc-4.7 CXX=g++-4.7"
      addons:
        apt_packages:
          - gcc-4.7
          - g++-4.7
          - valgrind

    # same as above, but in 32 bit mode, also turn off debugging (see elsewhere in this file for
    # an explanation).
    - env: TEST_SUITES="docomp testinstall" NO_COVERAGE=1 ABI=32 BUILDDIR=build CONFIGFLAGS=""
      addons:
        apt_packages:
          - gcc-multilib
          - g++-multilib
          #- libgmp-dev:i386    # do not install GMP, to test that GAP can build its own
          #- libreadline-dev:i386  # do not install readline, to test that GAP can be compiled and run without it
          #- zlib1g-dev::i386   # do not install zlib, to test that GAP can build its own

    # test error reporting and compiling as well as libgap
    - env: TEST_SUITES="testspecial test-compile testlibgap testkernel"

    # test Julia integration
    - env: TEST_SUITES="testinstall" JULIA=yes CONFIGFLAGS="--disable-Werror"

script:
  - set -e
  - etc/travis_fastfail.sh
  - pip install --user gcovr==4.1
  - bash etc/ci-prepare.sh
  - bash etc/ci.sh

after_script:
  - set -e
  - bash etc/ci-gather-coverage.sh
  - bash etc/ci-run-codecov.sh

notifications:
  slack:
    secure: Nvt9q2kZ/n7HyFeEYt7rvXMBLIR3AqSbQ54UeoU2UFrF+y0vJONChfa0csneyXPApH+objSUgS8ZW3g4gRiKtnO1jzQq9XDe895HtadY4vxYrduRLiwqI4o0k9KFVBPX7uIUXT22qIaAYBFC93m36zQKIAVDFzYuPoQfTWY3Yww=
    on_pull_requests: false
    on_success: change # default: always
    on_failure: change # default: always
  webhooks: https://coveralls.io/webhook
