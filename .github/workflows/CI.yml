name: CI

# Trigger the workflow on push or pull request
on:
  - push
  - pull_request

env:
  CFLAGS: "--coverage -O2 -g"
  CXXFLAGS: "--coverage -O2 -g"
  LDFLAGS: "--coverage"
  # default config flags: enable debug asserts
  CONFIGFLAGS: "--enable-debug"
  COVERALLS_PARALLEL: true

jobs:
  test-unix:
    name: ${{ matrix.test-suites }} - ${{ matrix.extra }} - ${{ matrix.os }}
    # Don't run this twice on PRs for branches pushed to the same repository
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # base test: fast first test
        os: [ubuntu-18.04]
        test-suites: ["testinstall"]

        # add a few extra tests
        include:
          - os: ubuntu-18.04
            test-suites: "docomp teststandard"

          - os: ubuntu-18.04
            test-suites: "docomp teststandard"
            extra: "ABI=32 CONFIGFLAGS=\"\""

          # FIXME: we used to run `teststandard` for HPC-GAP under Travis CI,
          # but somehow when running on GitHub Actions, it takes almost 4
          # hours (!) to complete instead of 25 minutes. So for now we just
          # run testinstall.
          - os: ubuntu-18.04
            test-suites: "docomp testinstall"
            extra: "HPCGAP=yes ABI=64"

          # compile packages and run GAP tests
          # don't use --enable-debug to prevent the tests from taking too long
          - os: ubuntu-18.04
            test-suites: "testpackages testinstall-loadall"
            extra: "ABI=64"
            packages: "
                    4ti2
                    libboost-dev
                    libcdd-dev
                    libcurl4-openssl-dev
                    libfplll-dev
                    libmpc-dev
                    libmpfi-dev
                    libmpfr-dev
                    libncurses5-dev
                    libzmq3-dev
                    pari-gp
                    singular
                    "

          # compile packages and run GAP tests in 32 bit mode
          # it seems profiling is having trouble collecting the coverage data
          # here, so we use NO_COVERAGE=1
          - os: ubuntu-18.04
            test-suites: "testpackages testinstall-loadall"
            extra: "ABI=32 NO_COVERAGE=1"
            packages: "
                    4ti2
                    libboost-dev
                    libcdd-dev
                    libcurl4-openssl-dev
                    libfplll-dev
                    libmpc-dev
                    libmpfi-dev
                    libmpfr-dev
                    libncurses5-dev
                    libzmq3-dev
                    pari-gp
                    singular
                    "

          # this job also tests GAP without readline
          - os: macos-latest
            test-suites: "docomp testinstall"
            extra: "BOOTSTRAP_MINIMAL=yes"

          # test creating the manual
          # TODO: make the resulting HTML and PDF files available as build
          # artifacts so that one can read the latest documentation (or even
          # preview doc changes for PRs). Use the `upload-artifact` action and
          # make it conditional. Or perhaps move the `makemanuals` job into
          # a separate workflow job?
          - os: ubuntu-18.04
            test-suites: "makemanuals"
            packages: "
                    texlive-latex-base
                    texlive-latex-recommended
                    texlive-latex-extra
                    texlive-extra-utils
                    texlive-fonts-recommended
                    texlive-fonts-extra
                    "

          # run tests contained in the manual. Also check ubuntu-latest works.
          - os: ubuntu-latest
            test-suites: "testmanuals"

          # run bugfix regression tests
          # Also turn on '--enable-memory-checking' to make sure GAP compiles
          # with the flag enabled. We do not actually test the memory
          # checking, as this slows down GAP too much.
          - os: ubuntu-18.04
            test-suites: "testbugfix"
            extra: "CONFIGFLAGS=\"--enable-memory-checking\""

          # out of tree builds -- these are mainly done to verify that the
          # build system work in this scenario. Since we don't expect the test
          # results to vary compared to the in-tree builds, we turn off
          # coverage reporting by setting NO_COVERAGE=1; this has the extra
          # benefit of also running the tests at least once with the
          # ReproducibleBehaviour option turned off.

          # The '--enable-valgrind' checks that GAP builds and runs correctly
          # when compiled with valgrind support. We do not actually run any
          # tests using valgrind, as it is too slow.
          - os: ubuntu-18.04
            test-suites: "docomp testbuildsys testinstall"
            extra: "NO_COVERAGE=1 ABI=64 BUILDDIR=out-of-tree
                    CONFIGFLAGS=\"--enable-valgrind\""
            packages: "valgrind"

          # same as above, but in 32 bit mode, also turn off debugging (see
          # elsewhere in this file for an explanation).
          - os: ubuntu-18.04
            test-suites: "docomp testbuildsys testinstall"
            extra: "NO_COVERAGE=1 ABI=32 BUILDDIR=out-of-tree CONFIGFLAGS=\"\""

          # test error reporting and compiling as well as libgap
          - os: ubuntu-18.04
            test-suites: "testspecial test-compile testlibgap testkernel"

          # test Julia integration
          - os: ubuntu-18.04
            test-suites: "testinstall"
            extra: "JULIA=yes CONFIGFLAGS=\"--enable-debug --disable-Werror\""

          # TODO: add back big endian test (we had s390x on Travis)
          # TODO: add back test with an older GCC, e.g. 4.7
          # TODO: restore Slack notifications for failed CI branch builds

    env:
      TEST_SUITES: ${{ matrix.test-suites }}

    steps:
      - uses: actions/checkout@v2

      - name: "Set up Python 3.7"
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Install dependencies"
        run: |
               ${{ matrix.extra }}
               if [ "$RUNNER_OS" == "Linux" ]; then
                   packages=(${{ matrix.packages }})
                   if [[ $TEST_SUITES == *testbuildsys* ]] ; then
                       sudo apt-get remove libgmp-dev libreadline-dev zlib1g-dev
                   else
                       packages+=(libgmp-dev libreadline-dev zlib1g-dev)
                   fi
                   if [[ $ABI == 32 ]] ; then
                       sudo dpkg --add-architecture i386
                       for i in "${!packages[@]}"; do
                           packages[$i]="${packages[$i]}:i386"
                       done
                       packages+=(gcc-multilib g++-multilib)
                   fi
                   sudo apt-get update
                   sudo apt-get install "${packages[@]}"
               elif [ "$RUNNER_OS" == "macOS" ]; then
                   brew install gmp zlib
               else
                   echo "$RUNNER_OS not supported"
                   exit 1
               fi
               python -m pip install gcovr

      - name: "Compile GAP and download packages"
        run: ${{ matrix.extra }} bash dev/ci-prepare.sh
      - name: "Run tests"
        run: ${{ matrix.extra }} bash dev/ci.sh
      - name: "Upload pdf manuals"
        if: ${{ matrix.test-suites == 'makemanuals' }}
        uses: actions/upload-artifact@v2
        with:
          name: manuals-pdf
          path: |
            doc/dev/manual.pdf
            doc/hpc/manual.pdf
            doc/ref/manual.pdf
            doc/tut/manual.pdf
      - name: "Upload html manuals"
        if: ${{ matrix.test-suites == 'makemanuals' }}
        uses: actions/upload-artifact@v2
        with:
          name: manuals-html
          path: |
            doc/*/*.html
            doc/*/*.css
            doc/*/*.js
      - name: "Gather coverage data"
        run: ${{ matrix.extra }} bash dev/ci-gather-coverage.sh
      - name: "Upload coverage data"
        run: ${{ matrix.extra }} bash dev/ci-upload-coverage.sh
      # - uses: codecov/codecov-action@v1

      # TODO: fix coveralls integration
      #- name: Coveralls Parallel
      #  uses: coverallsapp/github-action@master
      #  with:
      #    github-token: ${{ secrets.github_token }}
      #    flag-name: run-${{ matrix.test_number }}
      #    parallel: true

#  finish:
#    needs: test-unix
#    runs-on: ubuntu-18.04
#    steps:
#      - name: Coveralls Finished
#        uses: coverallsapp/github-action@master
#        with:
#          github-token: ${{ secrets.github_token }}
#          parallel-finished: true

  # Based on https://github.com/mit-plv/fiat-crypto/blob/master/.github/workflows/coq-windows.yml
  test-cygwin:
    name: cygwin64 - testinstall
    # Don't run this twice on PRs for branches pushed to the same repository
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    runs-on: windows-latest

    env:
      TEST_SUITES: testinstall

    steps:
      # This sets git to use UNIX line endings. While GAP should allow Windows
      # line endings in GAP files, we currently can't build GAP if the whole
      # source has Windows line endings
      - name: "Set git to use UNIX-style line endings"
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v2

      - uses: gap-actions/setup-cygwin-for-gap@v1

      # CHERE_INVOKING=1 lets us start a 'login shell' (to set paths) without changing directory
      - name: "Compile GAP and download packages"
        shell: cmd
        run: |
          @ECHO ON
          SET CHERE_INVOKING=1
          C:\cygwin64\bin\bash -l -c "bash dev/ci-prepare.sh"

      - name: "Run tests"
        shell: cmd
        run: |
          SET CHERE_INVOKING=1
          C:\cygwin64\bin\bash -l -c "bash dev/ci.sh"

  slack-notification-on-failure:
    name: Send slack notification on CI failure
    needs:
      - test-unix
      - test-cygwin
    if: ${{ always() && github.event_name == 'push' && github.repository == 'gap-system/gap' }}
    runs-on: ubuntu-latest

    steps:
      - name: Get branch name
        id: get-branch
        run: echo ::set-output name=branch::${GITHUB_REF#refs/*/}
      - name: Determine whether CI status changed
        uses: gap-actions/should-i-notify-action@v1
        id: should_notify
        with:
          branch: ${{ steps.get-branch.outputs.branch }}
          needs_context: ${{ toJson(needs) }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          notify_on_changed_status: true
      - name: Send slack notification
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522
        if: steps.should_notify.outputs.should_send_message == 'yes'
        with:
          status: ${{ steps.should_notify.outputs.last_status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
