name: CI

# Trigger the workflow on push or pull request
on:
  workflow_dispatch:
    inputs:
      # see https://github.com/marketplace/actions/debugging-with-tmate
      debug_enabled:
        description: 'Run the build with tmate debugging enabled'
        type: boolean
  pull_request:
  push:
  schedule:
    # Every day at 2:30 AM UTC
    - cron: '30 2 * * *'

concurrency:
  # group by workflow and ref; the last slightly strange component ensures that for pull
  # requests, we limit to 1 concurrent job, but for the master branch we don't
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/master' || github.run_number }}
  # Cancel intermediate builds, but only if it is a pull request build.
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  CFLAGS: "--coverage -O2 -g"
  CXXFLAGS: "--coverage -O2 -g"
  LDFLAGS: "--coverage"
  # default config flags: enable debug asserts
  CONFIGFLAGS: "--enable-debug"
  # CHERE_INVOKING=1 lets us start a 'login shell' (to set paths) in Windows without changing directory
  CHERE_INVOKING: 1

jobs:
  test:
    name: ${{ matrix.test-suites }} - ${{ matrix.extra }} - ${{ matrix.os }}
    # Don't run this twice on PRs for branches pushed to the same repository
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        shell: [bash]
        test-suites:
          [
            # base test: fast first test
            "testinstall",

            "teststandard",

            # run tests contained in the manual
            "testmanuals",

            # test error reporting and compiling as well as libgap
            "testspecial test-compile testlibgap testkernel",

            # compile packages and run GAP tests
            # don't use --enable-debug to prevent the tests from taking too long
            "testpackages testinstall-loadall",

            # test creating the manual
            # TODO: make the resulting HTML and PDF files available as build
            # artifacts so that one can read the latest documentation (or even
            # preview doc changes for PRs). Use the `upload-artifact` action and
            # make it conditional. Or perhaps move the `makemanuals` job into
            # a separate workflow job?
            "makemanuals",
          ]
        extra: [""]

        # add a few extra tests
        include:
          - os: ubuntu-18.04
            shell: bash
            test-suites: "teststandard"
            extra: "ABI=32 CONFIGFLAGS=\"\""

          # FIXME: we used to run `teststandard` for HPC-GAP under Travis CI,
          # but somehow when running on GitHub Actions, it takes almost 4
          # hours (!) to complete instead of 25 minutes. So for now we just
          # run testinstall.
          - os: ubuntu-18.04
            shell: bash
            test-suites: "testinstall"
            extra: "HPCGAP=yes ABI=64"

          # compile packages and run GAP tests in 32 bit mode
          # it seems profiling is having trouble collecting the coverage data
          # here, so we use NO_COVERAGE=1
          - os: ubuntu-18.04
            shell: bash
            test-suites: "testpackages testinstall-loadall"
            extra: "ABI=32 NO_COVERAGE=1"

          # this job also tests GAP without readline
          - os: macos-latest
            shell: bash
            test-suites: "testinstall"
            extra: "BOOTSTRAP_MINIMAL=yes"

          # run bugfix regression tests
          # Also turn on '--enable-memory-checking' to make sure GAP compiles
          # with the flag enabled. We do not actually test the memory
          # checking, as this slows down GAP too much.
          # Also check ubuntu-latest works.
          - os: ubuntu-latest
            shell: bash
            test-suites: "testbugfix"
            extra: "CONFIGFLAGS=\"--enable-memory-checking\""

          # out of tree builds -- these are mainly done to verify that the
          # build system work in this scenario. Since we don't expect the test
          # results to vary compared to the in-tree builds, we turn off
          # coverage reporting by setting NO_COVERAGE=1; this has the extra
          # benefit of also running the tests at least once with the
          # ReproducibleBehaviour option turned off.

          # The '--enable-valgrind' checks that GAP builds and runs correctly
          # when compiled with valgrind support. We do not actually run any
          # tests using valgrind, as it is too slow.
          - os: ubuntu-18.04
            shell: bash
            test-suites: "testbuildsys testinstall"
            extra: "NO_COVERAGE=1 ABI=64 BUILDDIR=out-of-tree
                    CONFIGFLAGS=\"--enable-valgrind\""
            packages: "valgrind"

          # same as above, but in 32 bit mode, also turn off debugging (see
          # elsewhere in this file for an explanation).
          - os: ubuntu-18.04
            shell: bash
            test-suites: "testbuildsys testinstall"
            extra: "NO_COVERAGE=1 ABI=32 BUILDDIR=out-of-tree CONFIGFLAGS=\"\""

          # test Julia integration
          - os: ubuntu-18.04
            shell: bash
            test-suites: "testinstall"
            extra: "JULIA=yes CONFIGFLAGS=\"--enable-debug --disable-Werror\""

          - os: windows-latest
            # The 'run' steps in this job use Cygwin's bash, once it is set up.
            #   --login: make a login shell (so PATH is set up)
            #   -o igncr: Accept windows line endings
            #   {0} : Pass any extra arguments from CI
            shell: C:\cygwin64\bin\bash.exe --login -o igncr '{0}'
            test-suites: "testinstall"

          # TODO: add back big endian test (we had s390x on Travis)
          # TODO: add back test with an older GCC, e.g. 4.7
          # TODO: restore Slack notifications for failed CI branch builds

    env:
      TEST_SUITES: ${{ matrix.test-suites }}

    steps:
      - uses: actions/checkout@v2

      - name: "Set up Python 3.7"
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - uses: gap-actions/setup-cygwin@v1
        if: ${{ runner.os == 'Windows' }}

      - name: "Install dependencies"
        run: |
               ${{ matrix.extra }}
               if [ "$RUNNER_OS" == "Linux" ]; then
                   packages=(${{ matrix.packages }})
                   if [[ $TEST_SUITES == *testbuildsys* ]] ; then
                       sudo apt-get remove libgmp-dev libreadline-dev zlib1g-dev
                   else
                       packages+=(libgmp-dev libreadline-dev zlib1g-dev)
                   fi
                   if [[ $TEST_SUITES == *testpackages* ]] ; then
                       packages+=(            # For:
                         4ti2                   # 4ti2Interface
                         libboost-dev           # NormalizInterface
                         libcdd-dev             # CddInterface
                         libcurl4-openssl-dev   # curlInterface
                         libfplll-dev           # float
                         libmpc-dev             # float
                         libmpfi-dev            # float
                         libmpfr-dev            # float
                         libncurses5-dev        # browse
                         libzmq3-dev            # ZeroMQInterface
                         pari-gp                # alnuth
                         singular               # singular
                       )
                   fi
                   if [[ $TEST_SUITES == *makemanuals* ]] ; then
                       packages+=(
                         texlive-latex-base
                         texlive-latex-recommended
                         texlive-latex-extra
                         texlive-extra-utils
                         texlive-fonts-recommended
                         texlive-fonts-extra
                       )
                   fi
                   if [[ $ABI == 32 ]] ; then
                       sudo dpkg --add-architecture i386
                       for i in "${!packages[@]}"; do
                           packages[$i]="${packages[$i]}:i386"
                       done
                       packages+=(gcc-multilib g++-multilib)
                   fi
                   sudo apt-get update
                   sudo apt-get install "${packages[@]}"
               elif [ "$RUNNER_OS" == "macOS" ]; then
                   brew install gmp zlib
               fi
               python -m pip install gcovr

      - name: "Configure GAP"
        run: ${{ matrix.extra }} dev/ci-configure-gap.sh
      - name: "Build GAP"
        run: ${{ matrix.extra }} dev/ci-build-gap.sh
      - name: "Download packages"
        run: ${{ matrix.extra }} dev/ci-download-pkgs.sh
      - name: "Setup tmate session"
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
      - name: "Run tests"
        run: ${{ matrix.extra }} dev/ci.sh
      - name: "Upload pdf manuals"
        if: ${{ matrix.test-suites == 'makemanuals' }}
        uses: actions/upload-artifact@v2
        with:
          name: manuals-pdf
          path: |
            doc/dev/manual.pdf
            doc/hpc/manual.pdf
            doc/ref/manual.pdf
            doc/tut/manual.pdf
      - name: "Upload html manuals"
        if: ${{ matrix.test-suites == 'makemanuals' }}
        uses: actions/upload-artifact@v2
        with:
          name: manuals-html
          path: |
            doc/*/*.html
            doc/*/*.css
            doc/*/*.js
      - name: "Gather coverage data"
        run: ${{ matrix.extra }} dev/ci-gather-coverage.sh
      - name: "Upload coverage data to Codecov"
        uses: codecov/codecov-action@v1
        if: ${{ runner.os != 'Windows' }} # FIXME/HACK: skip this on Windows, it runs forever
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: "!./pkg/**,!./extern/**"
          gcov_path_exclude: "./pkg/**"

  # The following job is duplicated in release.yml - keep the two in sync.
  # (except for their different 'needs' components).
  slack-notification:
    name: Send Slack notification on status change
    needs:
      - test
    if: ${{ always() && github.event_name != 'pull_request' && github.repository == 'gap-system/gap' }}
    runs-on: ubuntu-latest

    steps:
      - name: Get branch name
        id: get-branch
        run: echo ::set-output name=branch::${GITHUB_REF#refs/*/}
      - name: Determine whether CI status changed
        uses: gap-actions/should-i-notify-action@v1
        id: should_notify
        with:
          branch: ${{ steps.get-branch.outputs.branch }}
          needs_context: ${{ toJson(needs) }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          notify_on_changed_status: true
      - name: Send slack notification
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522
        if: ${{ steps.should_notify.outputs.should_send_message == 'yes' }}
        with:
          status: ${{ steps.should_notify.outputs.current_status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
