<Chapter Label="Chap-Updates">
<Heading>Preparing &GAP; Releases</Heading>

This chapter documents various tasks for preparing a major, minor or an 
update &GAP; release. To clarify the terminology, releasing 4.X.Y+1 after 
4.X.Y is called a <Q>minor release</Q> and releasing 4.X+1.Y after 4.X.Z
is called a <Q>major release</Q>. An <Q>update release</Q> means releasing
the latest officially distributed version of the core &GAP; system with 
new and updated packages (thus, the version number of the core &GAP; system
stays the same).
<P/>

The wrapping and publication processes are essentially the same for all 
three kinds of releases with some minor differences. For example, there is 
some more work to set up new paths on the ftp server for the major release, 
and there is no need to update main &GAP; manuals for the update release.

<Section Label="Sect-CommitForRelease">
<Heading>Committing changes for the next minor or major release</Heading>

<Subsection Label="Ssect-CommitRelBranch">
<Heading>Adding changes to the release branch</Heading>

Changes that should appear in the next release should first appear in the
the &stable; branch for the next minor release or in the &master; branch 
for the next major release. Normally they may first be developed and 
documented in feature branches, then tested and only after that merged 
into the appropriate release branch. 

</Subsection>

<Subsection Label="Ssect-FillUpdate">
<Heading>Document your changes</Heading>

The <F>dev/Updates</F> directory is used to describe changes 
intended for the next release. It contains the <F>README</F>
file explaining in more details how to document changes, and 
two templates: <F>template-long</F> with explanatory comments 
and <F>template-short</F> without them. To document a change, 
copy one of these templates to an appropriately named new file 
and fill in the details. This should be done in the same branch
where the change itself has been developed in order to keep
changes and their documentation together and facilitate tracking
those changes which are ready for the release.
<P/>
During the release preparation, files with these descriptions 
will be used to compose the overview of changes introduced in
the release. When they include test code, it will be used to 
extend the test file <F>tst/bugfix.tst</F>.
<P/>
Documenting changes, do <E>not</E> describe the wrong behaviour in present tense like in:
<List>
<Item>
<Q>Function <C>XYZ</C> returns the wrong result when computing <C>ABC</C>.</Q>
</Item>
</List>
Rather, write it like in these examples:
<List>
<Item>
<Q>Function <C>XYZ</C> returned the wrong result when computing <C>ABC</C>.</Q>
</Item>
<Item>
<Q>Fixed an error in function <C>XYZ</C> which returned the wrong result when computing <C>ABC</C>.</Q>
</Item>
<Item>
<Q>Function <C>XYZ</C> now returns the correct result when computing <C>ABC</C>.</Q>
</Item>
</List>
Otherwise, it will sound as if we knowingly introduced a new bug.
<P/>
Please assume that the text from your description will be pasted verbatim 
into the overview of changes for the release announcement (only cross-references 
and other needed &GAPDoc; markup will be added).
<P/>
After the release, descriptions of those changes from <C>dev/Updates</C> 
which made their way into the release should be moved to a new directory 
with a name containing the release version (e.g. <C>dev/Updates4.5.7</C>)
using <C>git mv</C> command to keep them under version control.
The <F>dev/Updates</F> directory in the branch from which the release
has been made must be reset to contain only the <F>README</F> file and 
templates (and possibly descriptions of changes that has been added there
after the release but before such ressetting will take place).
<P/>
WARNING: The content of the <C>dev/Updates</C> directory may look different
dependently on the branch! For example, in the integration branch it may
list changes ready to both next minor and major releases, as well as changes
merged into the integration branch for testing. It is important to update
your clone of the repository to the proper branch (normally, &stable;) before
resetting <C>dev/Updates</C>.

</Subsection>

</Section>

<Section Label="Sect-Wrapping">
<Heading>Wrapping Archives for a Release or Update</Heading>
<Subsection Label="Ssect-WrapNeeds">
<Heading>What you need to start</Heading>
Here is an overview about the hard- and software needed for the wrapping
process (at least with the currently available scripts and tools).
<List >
<Item>a UNIX/Linux machine</Item>
<Item>a disc partition with at least several GB of space</Item>
<Item>the standard <C>sh</C> shell and basic UNIX utilities like <C>cp</C>, 
<C>mv</C> or <C>cmp</C></Item>
<Item><C>git</C></Item>
<Item>a &TeX; installation (which can process big files)</Item>
<!--
<Item><C>perl</C> (for several manual tools)</Item>
<Item><C>tth</C>, see <URL
Text="http://hutchinson.belmont.ma.us/tth/">http://hutchinson.belmont.ma.us/tth/
</URL></Item>
-->
<Item>a C-compiler and <C>make</C></Item>
<Item>
<C>tar</C>, <C>gzip</C>, <C>bzip2</C>, <C>zip</C>, 
and <C>python</C> (for repacking into the various formats)</Item>
<Item>an installed &GAP;</Item>
<Item>persons who can provide Windows binaries of the &GAP; kernel</Item>
</List>
The following descriptions will explain what has to be done in the
various steps, and will mention some tools which are available in 
the <F>dev/DistributionUpdate/dist45</F> directory of the
&GAP; git repository (the name <F>dist45</F> reflects
that these tools were revised for the &GAP; 4.5 release; we are continuing
to use them to produce all subseqent releases).
</Subsection>

<Subsection Label="Ssect-BeforeWrap">
<Heading>Before the actual wrapping</Heading>

Here we describe preparational steps for wrapping a minor or major release.
Since an update release has no changes in the core &GAP; system, to wrap
an update release you may proceed with steps described in Section 
<Ref Label="Ssect-Wrap"/>.

<List >
<Mark>Run tests on release branch.</Mark>
<Item>Before thinking about wrapping apply all the standard tests
described in Chapter <Ref Chap="Chap-Testing"/> to a checked out git release
branch and make sure there are no problems. (But also do the tests again
later, starting with the archives which will be actually delivered to the
users!)
</Item>

<Mark>Edit variables in <F>setvar*</F> files.</Mark>
<Item>
For each of the three release types, some basic variables for the scripts 
used below are set in the files <F>setvarmajor</F>, <F>setvarminor</F> 
and <F>setvarupdate</F> in the <F>dev/DistributionUpdate/dist45</F> directory. 
Follow instructions from that files to adjust the variables as required. 
Normally you will need to change only one or two lines with version numbers 
and do not need to edit anything else, except when setting up release 
wrapping on a new machine. In that case, choose a directory for the wrapping 
which can hold at least several GB of data and specify it as <C>DISTROOT</C>. 
Find the path to the directory with the merged package archive (we assume 
that it is available locally) and specify it as <C>MERGEDPKGLOC</C>.
</Item>

<Mark>Extract test code from <F>Update</F> file.</Mark>
<Item>
Changes from previous version(s) are accumulated in individual files in the
<F>dev/Updates</F> directory, as explained in <Ref Subsect="Ssect-FillUpdate"/>.
<P/>
Test code contained there may be tested regularly in the period between 
releases using the <C>testupdates</C> target from the &GAP; test suite (see 
Chapter &nbsp;<Ref Chap="Chap-Testing"/>) to ensure that it works in various
settings. 
<P/>
The test code may be copied into <F>tst/bugfix.tst</F> at any stage, as 
soon as it is clear that the relevant change will be a part of the next 
release. At latest, it should appear in the version of <F>tst/bugfix.tst</F> 
which will be actually tested in the release candidate and delivered to the 
users (exceptions may be made for the test code which may be checked only 
interactively or requies a very specific testing environment). 
<P/>
Usually, copying of the test code to <F>tst/bugfix.tst</F> may happen 
gradually in several iterations if there will be several wrapping attempts; 
it can be left out while the wrapped archives are not yet expected to become 
release candidates and were just produced as a part of nightly/weekly tests.
<P/>
Remark: formerly it was possible to use the file <F>Update.g</F> from
<F>dev/DistributionUpdate/maindist</F> to extract test code, e.g. by calling
<Listing Type="GAP input">
d := UpdateData("../../Update");;
l := FixesAndOthersData(d);;
PrintTestLines("guck.tst", l);
</Listing>
to extract it to the file <F>guck.tst</F>. Now <F>Update.g</F> needs to be 
adjusted since test codes are now distributed across multiple files. The 
<C>testupdates</C> target from the &GAP; test suite extracts tests from 
these files, but it does not save them to a file, testing them <Q>on the fly</Q>.
</Item>

<Mark>Prepare an overview of changes for the Changes manual</Mark>
<Item>
If regular nightly/weekly tests go well and you hope to wrap a suitable
release candidate, you may start to prepare an overview of changes that
will appear in the next release for the Changes manual
(see <Ref BookName="changes" Label="Preface"/>) combining it from
descriptions provided in files from the <F>dev/Updates</F> directory.
<P/>
You may postpone this step until the very release, or perform it in several
iterations, keeping track on new entries that will appear in the 
<F>dev/Updates</F> directory. You may group various entries together and 
re-order them so that entries which are likely to be interesting for more 
&GAP; users are closer to the top of each category.
While converting plain text to the manual format, add cross-references and 
other &GAPDoc; markup as appropriate. Ideally, you need only to add the markup,
and the text of descriptions need not further editing, but please evaluate
it critically. At least you may need to change tenses or reorder the text
to better fit surrounding items. Also, do not forget to describe new 
packages added for the redistribution or packages with essential changes 
in their new versions.
<P/>
Remark: formerly it was possible to use the file <F>Util.g</F> to extract 
descriptions from the <F>dev/Update</F> file and roughly sort them into 
several categories, e.g. by calling
<Listing Type="GAP input">
d := UpdateData("../../Update");;
l := FixesAndOthersData(d);;
PrintDescriptionLines("guck.mixer", l);
</Listing>
to extract it to the file <F>guck.mixer</F>. Now <F>Util.g</F> needs to be 
adjusted since test codes are now distributed across multiple files, and we
need to produce &GAPDoc; markup and not Mixer. 
</Item>
</List>
</Subsection>

<Subsection Label="Ssect-Wrap">
<Heading>Wrapping the archives for the &GAP; source distribution</Heading>

Now we explain how to wrap the archives of the &GAP; source distribution
(note that the &GAP; binaries for Windows are not a part of the  &GAP; source 
distribution, and they should added to the <F>-win.zip</F> archive at a later
step).
<P/>
The &GAP; source distribution will be produced in the form of <F>.tar.gz</F>, 
<F>.tar.bz2</F> and <F>.zip</F> archives, and also in the <F>-nobin-win.zip</F> 
archive whose text files have Windows-stile line breaks.
<P/>
To wrap the archives, change to the <F>dev/DistributionUpdate/dist45/</F> 
directory of the &stable; branch of the &GAP; git repository, check that 
you have properly set up version numbers in <F>setvar*</F> file(s) as explained
in <Ref Label="Ssect-BeforeWrap"/> and then call one of the following:
<Listing>
make minor
make major
make update
</Listing>
dependently on the type of the release that you are going to wrap. 
<P/>
We will now explain in more details which steps will be performed. If not
specified, all files are assumed to be from the same 
<F>dev/DistributionUpdate/dist45/</F> directory.
<P/>
First, after calling <C>make</C> with the appropriate target, the
corresponding <F>setvar*</F> file will be copied into the <F>setvar</F> 
file (which may be removed with <C>make clean</C> if needed). Then the 
script <F>./doit</F> will be called. This script contains only calls to
other scripts, arranged in three stages with clean interfaces between
them (so, theoretically, each step may be performed on a different machine):
<List>
<Item>
checkout and archive the release branch;
</Item>
<Item>
make necessary preparations in the &GAP; core;
</Item>
<Item>
merge the &GAP; core with packages.
</Item>
</List>

We will now describe in some more details what each of the called scripts
is doing (you don't normally need to call them directly except while
debugging; calling them out of order is not guaranteed to work!).

<List>

<Mark><F>./setvar</F></Mark> 
<Item>
sets various environment variables (paths, version numbers, etc.).
</Item>

<Mark><F>./checkoutgit</F></Mark>
<Item>
creates a new clone of the &GAP; git repository. Dependently on the
release (minor, major or update) it will set the working directory to the
&stable; branch, &master; branch or to the revision taggest as the last
minor release respectively. It will also record the revision on which the
working directory is based and the time of cloning which will be 
subsequently used in the timestamp.
</Item>

<Mark><F>./classifyfiles</F></Mark>
<Item>
classifies files into text and binary files to be included in the main
archive or in the tools archive, or not shipped at all, using the Python
script <F>classifyfiles.py</F> and files <F>patternscolor.txt</F> and
<F>patternstextbinary.txt</F> which specify classification rules.
</Item>

<Mark><F>./zipreleasebranch</F></Mark>
<Item>
wraps files from the core &GAP; system that are marked for the redistribution
into the release branch archive and the tools archive
</Item>

<Mark><F>./zipmetainfo</F></Mark>
<Item>
wraps the meta-information archive, containing the <F>.servar</F> file, details
about the checkout time and various lists of files to be included. This script
completes stage 1.
</Item>

<Mark><F>./unpackreleasebranch</F></Mark>
<Item>
unpacks all three archives produced at two preceding steps: the release 
branch archive, the tools archive and the meta-information archive (at 
this step, all files and subdirectories that are not redistributed are 
already excluded).
</Item>

<Mark><F>./updateversioninfo</F></Mark>
<Item>
inserts version number, release date and other depending information 
(so these adjustments will never appear in the repository; instead, 
after the release we will find the parent revision used to wrap the 
release and will tag it with an appropriate tag).
<P/> 
Version numbers must be adjusted in the following files:
<List>
<Item>
<F>lib/system.g</F>, see <C>Version</C>, <C>Date</C> and
<C>NeedKernelVersion</C>
</Item>
<Item>
<F>src/system.c</F>, see <C>SyKernelVersion</C>
</Item>
<Item>
<F>doc/versiondata</F>, see <C>VERSIONNUMBER</C>,
<C>VERSIONSUFFIX</C>, <C>RELEASEDAY</C> and <C>RELEASEYEAR</C>.
</Item>
<Item>
<F>cnf/configure.in</F> and <F>cnf/configure.out</F>, 
look for <C>4.dev</C>
</Item>
<Item>
<F>bin/*.bat</F> files, look for <C>gap4dev</C> in paths.
</Item>
</List>
</Item>

<Mark><F>./fixpermissions</F></Mark>
<Item>
gives directories <C>755</C>-permissions and files <C>644</C>-permissions, 
and also gives <C>755</C>-permissions to a few explicitly listed there 
executable files (so it must be adjusted if new executable files are
added to the &GAP; distribution).
</Item>

<Mark><F>./zipgapcore</F></Mark>
<Item>
produces the <F>etc/tools.tar.gz</F> archive, also adding to it the 
<F>gapmacrodoc.pdf</F> document, and then prepares the archive of the 
&GAP; core system. 
</Item>

<Mark><F>./updatemetainfo</F></Mark>
<Item>
updates the meta-information archive, containing the <F>.servar</F> file, 
details about the checkout time and various lists of files to be included.
This script completes stage 2.
</Item>

<Mark><F>./unpackgapcore</F></Mark>
<Item>
unpacks the &GAP; core system archive and the meta-information archive 
produced by previous two steps (at this step, the core &GAP; system is
exactly in the same state as will be included in the distribution, except
hat manuals are yet to be built).
</Item>

<Mark><F>./unpackpackages</F></Mark>
<Item>
finds in the location specified in <C>MERGEDPKGLOC</C> and unpacks the 
latest merged packages archive and its corresponding metainformation 
archive (with, in particular, list of text/binary files).
</Item>

<Mark><F>./checkpermissions</F></Mark>
<Item>
checks for potentially problematic file permissions, i.e.:
<List>
<Item>
directories not having 755 permissions;
</Item>
<Item>
files not having 644 or 755 permissions;
</Item>
<Item>
files with 755 permissions, not recognized as executables by <F>file</F>.
</Item>
</List>
These situations may occur in some packages, since we adjust all permissions
in the core &GAP; system, but we do not modify permissions chosen by package
authors in case they deliberately use non-standard settings.
</Item>

<Mark><F>./makedoc</F></Mark>
<Item>
builds the main &GAP; manuals (the packages archives were unpacked on the 
previous step to ensure that cross-references to package manuals will be
resolved).
</Item>

<Mark><F>./addmanualfiles</F></Mark>
<Item>
adds lists of text and binary &GAP; documentation files to the lists of
files to be included in the distribution (thus, despite the previous 
step builds &GAP; binaries needed to run &GAP; to build its manuals,
our relying on <F>classifyfiles.py</F> and explicit control what has to be
included ensures that nothing produced by that build will appear in the 
release, except of the manuals themselves).
</Item>

<Mark><F>./zipgapsourcedistro</F></Mark>
<Item>
produces final &GAP; source distribution archives in all four formats:
<F>.tar.gz</F>, <F>.tar.bz2</F>, <F>.zip</F> archives and 
<F>-nobin-win.zip</F> with Windows-style line breaks.
</Item>

<Mark><F>./finalisemetainfo</F></Mark>
<Item>
produces the final version of the meta-information archive.
</Item>
</List>

Now archives with &GAP; source are ready for testing on as many 
different systems as possible. Recall the test suites described 
in Chapter <Ref Chap="Chap-Testing"/>.
</Subsection>

<Subsection Label="Ssect-Cygwin">
<Heading>Compiling on Windows with Cygwin</Heading>

To produce the <F>-win.zip</F> archive with binaries for &GAP; and some
packages, you need the <F>-nobin-win.zip</F> archive with Windows-style 
line breaks from the &GAP; source distribution produced as described
above, and a Windows computer with <Package>Cygwin</Package> 
(<URL>http://www.cygwin.com/</URL>) installed.
<P/>

Unpack the archive, start <Package>Cygwin</Package> shell, change to the
&GAP; root directory created after unpacking and enter
<Listing>
./configure
make cygwin
</Listing>

This will build &GAP; executable for Windows. After that, you may also build
packages with kernel modules which seem to work under Windows. As in 
&GAP; 4.6, these are the following: <Package>Browse</Package>,
<Package>cvec</Package>, <Package>EDIM</Package>, <Package>IO</Package>
and <Package>orb</Package>. Each of them supports the standard
<C>./configure ; make</C> building procedure.
<P/>

Note that there is a nasty problem with respect to dynamically linked 
libraries used by cygwin under Windows: There seems to be no working version
bookkeeping with DLLs. That is, &GAP; might not be working on Windows
systems where another version than the version against which the &GAP; 
executable was linked is installed (at least as long as a process is
running that uses the other version of <F>cygwin1.dll</F>). However,
we do not see a clean solution to this problem.

</Subsection>
</Section>

<Section Label="Sect-Releasing">
<Heading>Releasing a new version</Heading>

After all archives are wrapped and checked and no more errors are found,
one has to do the following things to properly publish the release:

<Enum>
<Item>
    Install the brand new version yourself using one of the produced &GAP;
    source distribution archives (one needs to have this during the 
    next few steps). The archive will already have documentation created
    and will contain latest released versions of all currently 
    redistributed packages. DO NOT USE any versions of packages 
    from other sources! 
</Item>
<Item>
    Copy <F>.tar.bz2</F> <F>.tar.gz</F>, <F>.zip</F> archives, <F>-win.zip</F> 
    and  <F>-noreadline-win.zip</F> archives (with Windows binaries), and also 
    <F>.exe</F> Windows installer to the ftp server, distributed into directories 
    by the archive type.  
    Also, place the archive of the core &GAP; system without packages into
    <F>ftp://ftp.gap-system.org/pub/gap/gap4core/</F> for developers.
    <P/>
    From this point, the release is considered to be published, 
    since the archives are now publicly available.
</Item>
<Item>
    Prepare individual archives for the same versions of &GAP; packages
    that were included in the release and copy them to the ftp server.
    The procedure should be explained in more details in Chapter 
    <Ref Label="Chap-PkgDist"/> (while this chapter is empty, see the
    <F>DistributionUpdate/PackageUpdate</F> directory from the 
    <URL>https://github.com/gap-system/gap-distribution</URL> repository for more
    details). In brief, you should change to the 
    <F>DistributionUpdate/PackageUpdate</F> directory of the mentioned 
    repository and do the following:
    <List>
    <Item>
    mark those versions of packages which are included in the release
    as <Q>stable</Q> using <F>./markStableRevisions</F> or 
    <F>./markAllLatestStable</F> scripts
    </Item>
    <Item>
    mark all stable versions of packages with the bookmark denoting the
    release, e.g.
    <Listing>
    ./markAllStableWithTimestamp gap4r5p6_2012_11_04-18_46
    </Listing>
    </Item>
    <Item>
    create individual archives for stable versions of &GAP; packages with
    <C>./mergePackages all stable</C>
    </Item>
    <Item>
    update package manuals for the website with <C>./updatePackageDocs</C>
    </Item>
    <Item>
    generate Mixer code for packages section of the website with
    <C>./writePackageWebInfos</C>
    </Item>
    <Item>
    copy package archives to the ftp server with
    <C>./CopyToFtpServer</C> (this script will perform a dry run first, 
    so you will be able to check if the list is correct before copying)
    </Item>
    <Item>
    update the local clone of the &GAP; website repository to the latest
    revision, then copy there package manuals and autogenerated Mixer code 
    using <C>./CopyToWWW2</C> (this script will also perform a dry run first, 
    so you will be able to check if everything is right before copying)
    </Item>
    <Item>
    change to the local clone of the &GAP; website repository. Copy manuals
    of updated packages to the public website. Revise, commit and push
    changes in the files kept under the version control. Some files for 
    packages which are just added for the redistribution may have to be
    placed under version control.
    <P/>
    Since now the autogenerated data are pushed into the central repository,
    mosts of the website editing steps listed below may be done on another
    machine different from the one used for checking for package updates 
    and wrapping package archives.
    </Item>
    </List>
</Item>
<Item>
Using some clone of the &GAP; website repository, do further editing 
as necessary:
<List>
<Item>
    In case of a minor or major release, read the file
    <F>dev/LinksOfAllHelpSections.g</F> from the &stable; branch of the 
    &GAP; git repository using your brand new installation of the 
    &GAP; version to be released (remember to start it with <C>-r</C> 
    option to avoid loading your private packages). This will create the
    file <F>AllLinksOfAllHelpSections.data</F> which is needed to create
    links from the webpages into the manual. Now update
    <F>lib/AllLinksOfAllHelpSections.data</F> with this new version.
</Item>
<Item> 
    Change <F>lib/config</F> to update version numbers, release 
    date and time, etc.
</Item>
<Item>
    For a minor or major release of &GAP; 4.X.Y, add the file 
    <F>Releases/4.X.Y.mixer</F> under the version control. You may
    use a similar file for the previous release as a template. 
    Links and names of the archives (version number) and file sizes have
    to be adjusted manually. For the specification 
    of all packages included in the distribition, see
    the file <F>Packages/pkgstaticlist</F>. 
    Update the symlink <F>Releases/index.html</F> to point to the new 
    <F>Releases/4.X.Y.html</F> file (you may need to run Mixer to create 
    it first). Add a new entry to the <F>Releases/tree</F> file.
    <P/>
    For an update release, you need only to continue the existing page
    for the latest release. You may also use previous section on that
    page as a template, and find detauls about packages in the file 
    <F>Packages/pkgstaticlist</F>. You do not need to list all changed
    packages in this case: listing only new and updated packages will
    suffice.
</Item>
<Item>
    If there is a new package added for the redistribution, you should
    edit <F>Packages/packages.mixer</F> and <F>Packages/tree</F> to
    add links to its overview page from the list of packages and from the 
    left navigation panel.
</Item>
<Item>
    Change <F>Download/index.mixer</F> and <F>Download/upgrade.mixer</F>
    to update version numbers, the &GAP; banner etc.
</Item>
<Item>
    For a major release only, change <F>WWW2/Download/Updates/index.mixer</F>:
    add new entry for the new release with a link to the Changes manual.
</Item>
<Item>
    Update package installation scripts <F>Download/InstPackages.sh</F>
    and <F>Download/InstPackages32.sh</F>, if there were any changes.
</Item>
<Item>
    Build a local copy of the website using Mixer, check that it works,
    then commit and push all changes to the central repository. If need
    be (e.g. for major releases with more structural changes), you may 
    use the testing website to check it there first. 
    See <Ref Label="Chap-GAPWeb"/> for further instructions.
</Item>
</List>
</Item>
<Item>
    Copy the complete <F>doc</F> directory (of your brand new installation) 
    to the public website <F>Manuals/doc</F> so that manual links will work.
</Item>
<Item>
     In the &GAP; repository, tag what has been released with 
     <C>v4.X.Y</C> where <C>X</C> is the major release number and 
     <C>Y</C> is the minor release number (e.g. <C>v4.6.3</C>). The
     <C>tag</C> command has the format

     <Listing>
     git tag TAGNAME REVISION
     </Listing>
     
     and the revision that should be tagged should be determined 
     from the release wrapping log. Normally this should be the tip
     of the &stable; branch 
     at the moment of wrapping the release (not at the moment of tagging!).
</Item>
<Item>
    Update <F>dev/Updates</F> directory:
    <List>
        <Item> Create <F>dev/Update4.X.Y</F> directory 
               and add it to the version control.
        </Item>
        <Item> Move all files with documented changes from 
               <F>dev/Updates</F> directory to <F>dev/Update4.X.Y</F>
               directory using <C>git mv</C> command, so that the only 
               files left in <F>dev/Updates</F> directory should be
               <F>README</F> and two templates (important to do this in
               the &stable; branch, since other branches may have more
               documented changes).
        </Item>
        <Item> Commit and push changes.
        </Item>
    </List>
</Item>
<Item>
    Edit variables in <F>dev/DistributionUpdate/dist45/setvar*</F> files,
    setting the numbers as appropriate for wrapping the next release candidate.
</Item>
<Item>
    Test download links and proofread web pages.
</Item>
<Item>
    Announce the new version in the forum (for the major release, it is
    preferable to wait with the announcement until it will be picked up
    by all alternative distributions as well).
</Item>
</Enum>
</Section>

</Chapter>

