Tasks for MatrixObj
===================

- Decide the relation between 'IsMatrix' and 'IsMatrixObj',

  define 'DefaultRing' for the entries as 'BaseDomain' of Plist matrices,

  introduce 'ZeroOfBaseDomain'.

- In the (about 240) library methods that *require* 'IsMatrix',
  adjust the code according to the 'IsMatrixObj' interface.

  (Avoid 'Zero(m[1][1])', 'm[i][j]', and working with rows.)

- In the (about 90) library methods that *call* 'IsMatrix',
  decide if one can use 'IsMatrixObj' instead.

- Change 'm[i][j]' to 'm[i,j]'.

  (Only where really matrices are affected?)

- Check the library methods that *create* matrices:

  What can be done in order to choose a suitable kind of matrix?

- Replace 'PositionNot( obj, zero )' by 'PositionNonZero( obj )'.

  (And change the default methods for 'PositionNonZero'.)

- Replace 'EmptyMatrix' and 'NullMapMatrix' by 'IsMatrixObj' objects.

- Document and implement the interface.

- Provide test code.

- Provide further kinds of vectors/matrices.



Additional notes by Max
=======================

- Change GF2 and 8bit matrix code to support empty matrices

- I am still unhappy about the name `FoldList`, and the whole function.
  The terms "fold" and "foldlist" have a fixed meaning in functional programming,
  see <https://en.wikipedia.org/wiki/Fold_(higher-order_function)>.
  Moreover, I wonder whether we really need a full global function for this?
  It seems to be used in only one place right now?

- I squashed @sebasguts work (and some fixes by others) into a single
  commit, simply because the existing commits were not broken into logical
  blocks (and often, contained changes not mentioned in the commit message).
  This can of course be split into separate commits again later on, though I
  actually don't think it's necessary for this

- there is some duplication between code this pull request adds, existing
  code we just commented out in this PR, and some code generic code which for
  some reason ended up in `vecmat.gi` (even though that file is meant for GF2
  code only -- which its name sadly does not reflect).

- I'd like to rename `vecmat.{gi,gd}` to e.g. `vecmat_gf2.{gi,gd}`, to
  indicate the purpose of those files; and then move any generic methods for
  (compressed) matrices and vectors in it into another file

- various operations on gf2 and 8bit matrix objects can silently convert
  them to plists-of-plists; e.g. it is allows to unbind an element in the
  middle, or assign something in cross characteristic, etc. etc. and all of
  these work and silently convert the matrix/vector. I can't think of
  situations where I'd want that -- I'd really prefer to require the user to
  perform a manual conversion, and instead let accesses like the above
  generate an error, to help track down bugs.
